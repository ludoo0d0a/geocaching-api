/**
 * Geocaching API v1.0
 * Geocaching API version 1.0.
 *
 * OpenAPI spec version: v1
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdditionalWaypoint', 'model/Attribute', 'model/AttributeType', 'model/BulkFailure', 'model/BulkResponse', 'model/Coordinates', 'model/Country', 'model/FriendRequest', 'model/Geocache', 'model/GeocacheCount', 'model/GeocacheLimit', 'model/GeocacheList', 'model/GeocacheLog', 'model/GeocacheLogType', 'model/GeocacheNote', 'model/GeocacheSize', 'model/GeocacheType', 'model/HQPromotionMetadata', 'model/Image', 'model/ListGeocache', 'model/Location', 'model/LogDraft', 'model/MembershipLevel', 'model/PostGeocacheList', 'model/PostGeocacheLog', 'model/PostImage', 'model/PostListGeocache', 'model/PostLogDraft', 'model/PostTrackableLog', 'model/PostUserWaypoint', 'model/PromotedDraft', 'model/Souvenir', 'model/State', 'model/Trackable', 'model/TrackableCount', 'model/TrackableLog', 'model/TrackableLogType', 'model/TrackableType', 'model/User', 'model/UserData', 'model/UserReference', 'model/UserWaypoint', 'api/FriendsApi', 'api/GeocacheLogsApi', 'api/GeocacheNotesApi', 'api/GeocachesApi', 'api/HQPromotionsApi', 'api/ListsApi', 'api/LogDraftsApi', 'api/ReferenceDataApi', 'api/StatusApi', 'api/TrackableLogsApi', 'api/TrackablesApi', 'api/UserWaypointsApi', 'api/UsersApi', 'api/UtilitiesApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/AdditionalWaypoint'), require('./model/Attribute'), require('./model/AttributeType'), require('./model/BulkFailure'), require('./model/BulkResponse'), require('./model/Coordinates'), require('./model/Country'), require('./model/FriendRequest'), require('./model/Geocache'), require('./model/GeocacheCount'), require('./model/GeocacheLimit'), require('./model/GeocacheList'), require('./model/GeocacheLog'), require('./model/GeocacheLogType'), require('./model/GeocacheNote'), require('./model/GeocacheSize'), require('./model/GeocacheType'), require('./model/HQPromotionMetadata'), require('./model/Image'), require('./model/ListGeocache'), require('./model/Location'), require('./model/LogDraft'), require('./model/MembershipLevel'), require('./model/PostGeocacheList'), require('./model/PostGeocacheLog'), require('./model/PostImage'), require('./model/PostListGeocache'), require('./model/PostLogDraft'), require('./model/PostTrackableLog'), require('./model/PostUserWaypoint'), require('./model/PromotedDraft'), require('./model/Souvenir'), require('./model/State'), require('./model/Trackable'), require('./model/TrackableCount'), require('./model/TrackableLog'), require('./model/TrackableLogType'), require('./model/TrackableType'), require('./model/User'), require('./model/UserData'), require('./model/UserReference'), require('./model/UserWaypoint'), require('./api/FriendsApi'), require('./api/GeocacheLogsApi'), require('./api/GeocacheNotesApi'), require('./api/GeocachesApi'), require('./api/HQPromotionsApi'), require('./api/ListsApi'), require('./api/LogDraftsApi'), require('./api/ReferenceDataApi'), require('./api/StatusApi'), require('./api/TrackableLogsApi'), require('./api/TrackablesApi'), require('./api/UserWaypointsApi'), require('./api/UsersApi'), require('./api/UtilitiesApi'));
  }
}(function(ApiClient, AdditionalWaypoint, Attribute, AttributeType, BulkFailure, BulkResponse, Coordinates, Country, FriendRequest, Geocache, GeocacheCount, GeocacheLimit, GeocacheList, GeocacheLog, GeocacheLogType, GeocacheNote, GeocacheSize, GeocacheType, HQPromotionMetadata, Image, ListGeocache, Location, LogDraft, MembershipLevel, PostGeocacheList, PostGeocacheLog, PostImage, PostListGeocache, PostLogDraft, PostTrackableLog, PostUserWaypoint, PromotedDraft, Souvenir, State, Trackable, TrackableCount, TrackableLog, TrackableLogType, TrackableType, User, UserData, UserReference, UserWaypoint, FriendsApi, GeocacheLogsApi, GeocacheNotesApi, GeocachesApi, HQPromotionsApi, ListsApi, LogDraftsApi, ReferenceDataApi, StatusApi, TrackableLogsApi, TrackablesApi, UserWaypointsApi, UsersApi, UtilitiesApi) {
  'use strict';

  /**
   * Geocaching_API_version_1_0_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var GeocachingApiV10 = require('index'); // See note below*.
   * var xxxSvc = new GeocachingApiV10.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new GeocachingApiV10.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new GeocachingApiV10.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new GeocachingApiV10.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version v1
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AdditionalWaypoint model constructor.
     * @property {module:model/AdditionalWaypoint}
     */
    AdditionalWaypoint: AdditionalWaypoint,
    /**
     * The Attribute model constructor.
     * @property {module:model/Attribute}
     */
    Attribute: Attribute,
    /**
     * The AttributeType model constructor.
     * @property {module:model/AttributeType}
     */
    AttributeType: AttributeType,
    /**
     * The BulkFailure model constructor.
     * @property {module:model/BulkFailure}
     */
    BulkFailure: BulkFailure,
    /**
     * The BulkResponse model constructor.
     * @property {module:model/BulkResponse}
     */
    BulkResponse: BulkResponse,
    /**
     * The Coordinates model constructor.
     * @property {module:model/Coordinates}
     */
    Coordinates: Coordinates,
    /**
     * The Country model constructor.
     * @property {module:model/Country}
     */
    Country: Country,
    /**
     * The FriendRequest model constructor.
     * @property {module:model/FriendRequest}
     */
    FriendRequest: FriendRequest,
    /**
     * The Geocache model constructor.
     * @property {module:model/Geocache}
     */
    Geocache: Geocache,
    /**
     * The GeocacheCount model constructor.
     * @property {module:model/GeocacheCount}
     */
    GeocacheCount: GeocacheCount,
    /**
     * The GeocacheLimit model constructor.
     * @property {module:model/GeocacheLimit}
     */
    GeocacheLimit: GeocacheLimit,
    /**
     * The GeocacheList model constructor.
     * @property {module:model/GeocacheList}
     */
    GeocacheList: GeocacheList,
    /**
     * The GeocacheLog model constructor.
     * @property {module:model/GeocacheLog}
     */
    GeocacheLog: GeocacheLog,
    /**
     * The GeocacheLogType model constructor.
     * @property {module:model/GeocacheLogType}
     */
    GeocacheLogType: GeocacheLogType,
    /**
     * The GeocacheNote model constructor.
     * @property {module:model/GeocacheNote}
     */
    GeocacheNote: GeocacheNote,
    /**
     * The GeocacheSize model constructor.
     * @property {module:model/GeocacheSize}
     */
    GeocacheSize: GeocacheSize,
    /**
     * The GeocacheType model constructor.
     * @property {module:model/GeocacheType}
     */
    GeocacheType: GeocacheType,
    /**
     * The HQPromotionMetadata model constructor.
     * @property {module:model/HQPromotionMetadata}
     */
    HQPromotionMetadata: HQPromotionMetadata,
    /**
     * The Image model constructor.
     * @property {module:model/Image}
     */
    Image: Image,
    /**
     * The ListGeocache model constructor.
     * @property {module:model/ListGeocache}
     */
    ListGeocache: ListGeocache,
    /**
     * The Location model constructor.
     * @property {module:model/Location}
     */
    Location: Location,
    /**
     * The LogDraft model constructor.
     * @property {module:model/LogDraft}
     */
    LogDraft: LogDraft,
    /**
     * The MembershipLevel model constructor.
     * @property {module:model/MembershipLevel}
     */
    MembershipLevel: MembershipLevel,
    /**
     * The PostGeocacheList model constructor.
     * @property {module:model/PostGeocacheList}
     */
    PostGeocacheList: PostGeocacheList,
    /**
     * The PostGeocacheLog model constructor.
     * @property {module:model/PostGeocacheLog}
     */
    PostGeocacheLog: PostGeocacheLog,
    /**
     * The PostImage model constructor.
     * @property {module:model/PostImage}
     */
    PostImage: PostImage,
    /**
     * The PostListGeocache model constructor.
     * @property {module:model/PostListGeocache}
     */
    PostListGeocache: PostListGeocache,
    /**
     * The PostLogDraft model constructor.
     * @property {module:model/PostLogDraft}
     */
    PostLogDraft: PostLogDraft,
    /**
     * The PostTrackableLog model constructor.
     * @property {module:model/PostTrackableLog}
     */
    PostTrackableLog: PostTrackableLog,
    /**
     * The PostUserWaypoint model constructor.
     * @property {module:model/PostUserWaypoint}
     */
    PostUserWaypoint: PostUserWaypoint,
    /**
     * The PromotedDraft model constructor.
     * @property {module:model/PromotedDraft}
     */
    PromotedDraft: PromotedDraft,
    /**
     * The Souvenir model constructor.
     * @property {module:model/Souvenir}
     */
    Souvenir: Souvenir,
    /**
     * The State model constructor.
     * @property {module:model/State}
     */
    State: State,
    /**
     * The Trackable model constructor.
     * @property {module:model/Trackable}
     */
    Trackable: Trackable,
    /**
     * The TrackableCount model constructor.
     * @property {module:model/TrackableCount}
     */
    TrackableCount: TrackableCount,
    /**
     * The TrackableLog model constructor.
     * @property {module:model/TrackableLog}
     */
    TrackableLog: TrackableLog,
    /**
     * The TrackableLogType model constructor.
     * @property {module:model/TrackableLogType}
     */
    TrackableLogType: TrackableLogType,
    /**
     * The TrackableType model constructor.
     * @property {module:model/TrackableType}
     */
    TrackableType: TrackableType,
    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User: User,
    /**
     * The UserData model constructor.
     * @property {module:model/UserData}
     */
    UserData: UserData,
    /**
     * The UserReference model constructor.
     * @property {module:model/UserReference}
     */
    UserReference: UserReference,
    /**
     * The UserWaypoint model constructor.
     * @property {module:model/UserWaypoint}
     */
    UserWaypoint: UserWaypoint,
    /**
     * The FriendsApi service constructor.
     * @property {module:api/FriendsApi}
     */
    FriendsApi: FriendsApi,
    /**
     * The GeocacheLogsApi service constructor.
     * @property {module:api/GeocacheLogsApi}
     */
    GeocacheLogsApi: GeocacheLogsApi,
    /**
     * The GeocacheNotesApi service constructor.
     * @property {module:api/GeocacheNotesApi}
     */
    GeocacheNotesApi: GeocacheNotesApi,
    /**
     * The GeocachesApi service constructor.
     * @property {module:api/GeocachesApi}
     */
    GeocachesApi: GeocachesApi,
    /**
     * The HQPromotionsApi service constructor.
     * @property {module:api/HQPromotionsApi}
     */
    HQPromotionsApi: HQPromotionsApi,
    /**
     * The ListsApi service constructor.
     * @property {module:api/ListsApi}
     */
    ListsApi: ListsApi,
    /**
     * The LogDraftsApi service constructor.
     * @property {module:api/LogDraftsApi}
     */
    LogDraftsApi: LogDraftsApi,
    /**
     * The ReferenceDataApi service constructor.
     * @property {module:api/ReferenceDataApi}
     */
    ReferenceDataApi: ReferenceDataApi,
    /**
     * The StatusApi service constructor.
     * @property {module:api/StatusApi}
     */
    StatusApi: StatusApi,
    /**
     * The TrackableLogsApi service constructor.
     * @property {module:api/TrackableLogsApi}
     */
    TrackableLogsApi: TrackableLogsApi,
    /**
     * The TrackablesApi service constructor.
     * @property {module:api/TrackablesApi}
     */
    TrackablesApi: TrackablesApi,
    /**
     * The UserWaypointsApi service constructor.
     * @property {module:api/UserWaypointsApi}
     */
    UserWaypointsApi: UserWaypointsApi,
    /**
     * The UsersApi service constructor.
     * @property {module:api/UsersApi}
     */
    UsersApi: UsersApi,
    /**
     * The UtilitiesApi service constructor.
     * @property {module:api/UtilitiesApi}
     */
    UtilitiesApi: UtilitiesApi
  };

  return exports;
}));
