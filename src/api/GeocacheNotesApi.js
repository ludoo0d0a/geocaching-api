/**
 * API v1.0
 * API version 1.0.
 *
 * The version of the OpenAPI document: v1
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GeocacheNote from '../model/GeocacheNote';

/**
* GeocacheNotes service.
* @module api/GeocacheNotesApi
* @version v1
*/
export default class GeocacheNotesApi {

    /**
    * Constructs a new GeocacheNotesApi. 
    * @alias module:api/GeocacheNotesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete a geocache note for the calling user
     * This method will return no content.
     * @param {String} referenceCode The identifier of the geocache (ex: GC25)
     * @param {String} apiVersion The requested API version
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    geocacheNotesDeleteNoteWithHttpInfo(referenceCode, apiVersion) {
      let postBody = null;
      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling geocacheNotesDeleteNote");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling geocacheNotesDeleteNote");
      }

      let pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json-patch+json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v{api-version}/geocaches/{referenceCode}/notes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a geocache note for the calling user
     * This method will return no content.
     * @param {String} referenceCode The identifier of the geocache (ex: GC25)
     * @param {String} apiVersion The requested API version
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    geocacheNotesDeleteNote(referenceCode, apiVersion) {
      return this.geocacheNotesDeleteNoteWithHttpInfo(referenceCode, apiVersion)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upsert a geocache note for the calling user
     * This method will return the upserted text.
     * @param {String} referenceCode The identifier of the geocache (ex: GC25)
     * @param {String} apiVersion The requested API version
     * @param {module:model/GeocacheNote} geocacheNote The geocache note text.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    geocacheNotesUpsertNoteWithHttpInfo(referenceCode, apiVersion, geocacheNote) {
      let postBody = geocacheNote;
      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling geocacheNotesUpsertNote");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling geocacheNotesUpsertNote");
      }
      // verify the required parameter 'geocacheNote' is set
      if (geocacheNote === undefined || geocacheNote === null) {
        throw new Error("Missing the required parameter 'geocacheNote' when calling geocacheNotesUpsertNote");
      }

      let pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken'];
      let contentTypes = ['application/json', 'application/json-patch+json', 'application/x-www-form-urlencoded', 'text/json'];
      let accepts = ['application/json', 'application/json-patch+json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v{api-version}/geocaches/{referenceCode}/notes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upsert a geocache note for the calling user
     * This method will return the upserted text.
     * @param {String} referenceCode The identifier of the geocache (ex: GC25)
     * @param {String} apiVersion The requested API version
     * @param {module:model/GeocacheNote} geocacheNote The geocache note text.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    geocacheNotesUpsertNote(referenceCode, apiVersion, geocacheNote) {
      return this.geocacheNotesUpsertNoteWithHttpInfo(referenceCode, apiVersion, geocacheNote)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
