/**
 * Geocaching API v1.0
 * Geocaching API version 1.0.
 *
 * OpenAPI spec version: v1
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Geocache', 'model/GeocacheLog', 'model/Image', 'model/Trackable', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Geocache'), require('../model/GeocacheLog'), require('../model/Image'), require('../model/Trackable'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.GeocachingApiV10) {
      root.GeocachingApiV10 = {};
    }
    root.GeocachingApiV10.GeocachesApi = factory(root.GeocachingApiV10.ApiClient, root.GeocachingApiV10.Geocache, root.GeocachingApiV10.GeocacheLog, root.GeocachingApiV10.Image, root.GeocachingApiV10.Trackable, root.GeocachingApiV10.User);
  }
}(this, function(ApiClient, Geocache, GeocacheLog, Image, Trackable, User) {
  'use strict';

  /**
   * Geocaches service.
   * @module api/GeocachesApi
   * @version v1
   */

  /**
   * Constructs a new GeocachesApi. 
   * @alias module:api/GeocachesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the geocachesGetFavoritedBy operation.
     * @callback module:api/GeocachesApi~geocachesGetFavoritedByCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Users that have favorited a geocache
     * This method will return a list of users.
     * @param {String} referenceCode The reference code of the geocache (example: GC25)
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip how many users to skip (default to 0)
     * @param {Number} opts.take how many users to retrieve (default to 10)
     * @param {String} opts.fields fields you want to return, defaults to \&quot;referenceCode\&quot; (default to referenceCode)
     * @param {module:api/GeocachesApi~geocachesGetFavoritedByCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.geocachesGetFavoritedBy = function(referenceCode, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling geocachesGetFavoritedBy");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling geocachesGetFavoritedBy");
      }


      var pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      var queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/v{api-version}/geocaches/{referenceCode}/favoritedby', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the geocachesGetGeocache operation.
     * @callback module:api/GeocachesApi~geocachesGetGeocacheCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Geocache} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single Geocache
     * This method will return a single Geocache.
     * @param {String} referenceCode The reference code of the geocache (example: GC25).
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.lite Select to return a geocache object without the description and hints (default to false)
     * @param {String} opts.expand fields to include with base geocache object (default to )
     * @param {String} opts.fields fields you want to return, defaults to \&quot;referenceCode\&quot; (default to referenceCode)
     * @param {module:api/GeocachesApi~geocachesGetGeocacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Geocache}
     */
    this.geocachesGetGeocache = function(referenceCode, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling geocachesGetGeocache");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling geocachesGetGeocache");
      }


      var pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      var queryParams = {
        'lite': opts['lite'],
        'expand': opts['expand'],
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = Geocache;

      return this.apiClient.callApi(
        '/v{api-version}/geocaches/{referenceCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the geocachesGetGeocaches operation.
     * @callback module:api/GeocachesApi~geocachesGetGeocachesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Geocache>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of geocaches
     * This method will return a list of geocaches.
     * @param {String} referenceCodes comma delimited list of geocache reference codes to retrieve (example: GC25,GC26,GC27).
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.lite Select to return a geocache object without the description and hints (default to false)
     * @param {String} opts.expand fields to include with base geocache object (default to )
     * @param {String} opts.fields fields you want to return, defaults to \&quot;referenceCode\&quot; (default to referenceCode)
     * @param {module:api/GeocachesApi~geocachesGetGeocachesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Geocache>}
     */
    this.geocachesGetGeocaches = function(referenceCodes, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'referenceCodes' is set
      if (referenceCodes === undefined || referenceCodes === null) {
        throw new Error("Missing the required parameter 'referenceCodes' when calling geocachesGetGeocaches");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling geocachesGetGeocaches");
      }


      var pathParams = {
        'api-version': apiVersion
      };
      var queryParams = {
        'referenceCodes': referenceCodes,
        'lite': opts['lite'],
        'expand': opts['expand'],
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = [Geocache];

      return this.apiClient.callApi(
        '/v{api-version}/geocaches', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the geocachesGetImages operation.
     * @callback module:api/GeocachesApi~geocachesGetImagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Image>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of images for a geocache
     * This method will return a list of images.
     * @param {String} referenceCode The reference code of the geocache (example: GC25).
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip how many images to skip (default to 0)
     * @param {Number} opts.take how many images to retrieve (default to 10)
     * @param {String} opts.fields fields you want to return, defaults to \&quot;url\&quot; (default to url)
     * @param {module:api/GeocachesApi~geocachesGetImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Image>}
     */
    this.geocachesGetImages = function(referenceCode, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling geocachesGetImages");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling geocachesGetImages");
      }


      var pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      var queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = [Image];

      return this.apiClient.callApi(
        '/v{api-version}/geocaches/{referenceCode}/images', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the geocachesGetLogs operation.
     * @callback module:api/GeocachesApi~geocachesGetLogsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GeocacheLog>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of geocache logs for the specified geocache
     * This method will return a list of geocache logs.
     * @param {String} referenceCode The reference code of the geocache (example: GC25).
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip how many logs to skip over (default to 0)
     * @param {Number} opts.take how many logs to retrieve (default to 10)
     * @param {String} opts.expand fields to include with base geocache object (default to )
     * @param {String} opts.fields fields you want to return, defaults to referenceCode (default to referenceCode)
     * @param {module:api/GeocachesApi~geocachesGetLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GeocacheLog>}
     */
    this.geocachesGetLogs = function(referenceCode, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling geocachesGetLogs");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling geocachesGetLogs");
      }


      var pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      var queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'expand': opts['expand'],
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = [GeocacheLog];

      return this.apiClient.callApi(
        '/v{api-version}/geocaches/{referenceCode}/geocachelogs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the geocachesGetTrackables operation.
     * @callback module:api/GeocachesApi~geocachesGetTrackablesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Trackable>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of trackables in a geocache
     * This method will return a list of trackables.
     * @param {String} referenceCode The reference code of the geocache (example: GC25).
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip how many trackables to skip (default to 0)
     * @param {Number} opts.take how many trackables to retrieve (default to 10)
     * @param {String} opts.fields fields you want to return, defaults to referenceCode (default to referenceCode)
     * @param {String} opts.expand  (default to )
     * @param {module:api/GeocachesApi~geocachesGetTrackablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Trackable>}
     */
    this.geocachesGetTrackables = function(referenceCode, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling geocachesGetTrackables");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling geocachesGetTrackables");
      }


      var pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      var queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'fields': opts['fields'],
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = [Trackable];

      return this.apiClient.callApi(
        '/v{api-version}/geocaches/{referenceCode}/trackables', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the geocachesSearch operation.
     * @callback module:api/GeocachesApi~geocachesSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Geocache>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for Geocaches
     * This method will return search results.
     * @param {String} q The query used on the geocaches
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {String} opts.sort Defaults to distance if coords are provided otherwise favoritepoints (distance, favorites, cachename, size, difficulty, terrain, founddate, placeddate, id) (default to )
     * @param {Boolean} opts.lite Return a lite version of geocache (no description, hint, or (default to true)
     * @param {Number} opts.skip Defaults to 0, how many geocaches to skip (default to 0)
     * @param {Number} opts.take Defaults to 20, how many geocaches to return (default to 50)
     * @param {String} opts.expand fields to include with base geocache object (default to )
     * @param {String} opts.fields Properties you want to return, defaults to \&quot;referencecode\&quot; (default to referenceCode)
     * @param {module:api/GeocachesApi~geocachesSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Geocache>}
     */
    this.geocachesSearch = function(q, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling geocachesSearch");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling geocachesSearch");
      }


      var pathParams = {
        'api-version': apiVersion
      };
      var queryParams = {
        'q': q,
        'sort': opts['sort'],
        'lite': opts['lite'],
        'skip': opts['skip'],
        'take': opts['take'],
        'expand': opts['expand'],
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = [Geocache];

      return this.apiClient.callApi(
        '/v{api-version}/geocaches/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
