/**
 * Geocaching API v1.0
 * Geocaching API version 1.0.
 *
 * OpenAPI spec version: v1
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Image', 'model/LogDraft', 'model/PostImage', 'model/PostLogDraft', 'model/PromotedDraft'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Image'), require('../model/LogDraft'), require('../model/PostImage'), require('../model/PostLogDraft'), require('../model/PromotedDraft'));
  } else {
    // Browser globals (root is window)
    if (!root.GeocachingApiV10) {
      root.GeocachingApiV10 = {};
    }
    root.GeocachingApiV10.LogDraftsApi = factory(root.GeocachingApiV10.ApiClient, root.GeocachingApiV10.Image, root.GeocachingApiV10.LogDraft, root.GeocachingApiV10.PostImage, root.GeocachingApiV10.PostLogDraft, root.GeocachingApiV10.PromotedDraft);
  }
}(this, function(ApiClient, Image, LogDraft, PostImage, PostLogDraft, PromotedDraft) {
  'use strict';

  /**
   * LogDrafts service.
   * @module api/LogDraftsApi
   * @version v1
   */

  /**
   * Constructs a new LogDraftsApi. 
   * @alias module:api/LogDraftsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the logDraftsAddImage operation.
     * @callback module:api/LogDraftsApi~logDraftsAddImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Image} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add image to log draft
     * This method will return the image created.
     * @param {module:model/PostImage} image The image to upload and add
     * @param {String} referenceCode identifier of the log draft
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Properties you want to return, defaults to url (default to url)
     * @param {module:api/LogDraftsApi~logDraftsAddImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Image}
     */
    this.logDraftsAddImage = function(image, referenceCode, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = image;

      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling logDraftsAddImage");
      }

      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling logDraftsAddImage");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling logDraftsAddImage");
      }


      var pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/json-patch+json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = Image;

      return this.apiClient.callApi(
        '/v{api-version}/logdrafts/{referenceCode}/images', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logDraftsCreateDraft operation.
     * @callback module:api/LogDraftsApi~logDraftsCreateDraftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogDraft} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a log draft
     * This method will return the log draft created.
     * @param {module:model/PostLogDraft} logDraft The log draft to create.
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Properties you want to return, defaults to referenceCode (default to referenceCode)
     * @param {module:api/LogDraftsApi~logDraftsCreateDraftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogDraft}
     */
    this.logDraftsCreateDraft = function(logDraft, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = logDraft;

      // verify the required parameter 'logDraft' is set
      if (logDraft === undefined || logDraft === null) {
        throw new Error("Missing the required parameter 'logDraft' when calling logDraftsCreateDraft");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling logDraftsCreateDraft");
      }


      var pathParams = {
        'api-version': apiVersion
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/json-patch+json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = LogDraft;

      return this.apiClient.callApi(
        '/v{api-version}/logdrafts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logDraftsDeleteDraft operation.
     * @callback module:api/LogDraftsApi~logDraftsDeleteDraftCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a log draft
     * This method will return no content.
     * @param {String} referenceCode The identifier of the log draft (ex: LD25)
     * @param {String} apiVersion The requested API version
     * @param {module:api/LogDraftsApi~logDraftsDeleteDraftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.logDraftsDeleteDraft = function(referenceCode, apiVersion, callback) {
      var postBody = null;

      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling logDraftsDeleteDraft");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling logDraftsDeleteDraft");
      }


      var pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v{api-version}/logdrafts/{referenceCode}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logDraftsGetDraft operation.
     * @callback module:api/LogDraftsApi~logDraftsGetDraftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogDraft} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single log draft for the calling user
     * This method will return a single draft log.
     * @param {String} referenceCode The reference code of the log draft (example: LD25).
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Properties you want to return, defaults to referenceCode (default to referenceCode)
     * @param {module:api/LogDraftsApi~logDraftsGetDraftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogDraft}
     */
    this.logDraftsGetDraft = function(referenceCode, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling logDraftsGetDraft");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling logDraftsGetDraft");
      }


      var pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = LogDraft;

      return this.apiClient.callApi(
        '/v{api-version}/logdrafts/{referenceCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logDraftsGetUserDrafts operation.
     * @callback module:api/LogDraftsApi~logDraftsGetUserDraftsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LogDraft>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of log drafts for the calling user
     * This method will return a page (list + total) of log drafts.
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip How many drafts to skip (default &#x3D; 0) (default to 0)
     * @param {Number} opts.take How many drafts to return (default &#x3D; 10) (default to 10)
     * @param {String} opts.sort How to sort the drafts (default &#x3D; loggeddateutc) (default to dateloggedutc)
     * @param {String} opts.fields Properties you want to return, defaults to referenceCode (default to referenceCode)
     * @param {module:api/LogDraftsApi~logDraftsGetUserDraftsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LogDraft>}
     */
    this.logDraftsGetUserDrafts = function(apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling logDraftsGetUserDrafts");
      }


      var pathParams = {
        'api-version': apiVersion
      };
      var queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'sort': opts['sort'],
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = [LogDraft];

      return this.apiClient.callApi(
        '/v{api-version}/logdrafts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logDraftsPromoteToGeocacheLog operation.
     * @callback module:api/LogDraftsApi~logDraftsPromoteToGeocacheLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PromotedDraft} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Promote Log Draft to Geocache Log
     * This method will return the promoted draft info.
     * @param {module:model/LogDraft} draft The draft to promote to log
     * @param {String} referenceCode identifier of the log draft
     * @param {String} apiVersion The requested API version
     * @param {module:api/LogDraftsApi~logDraftsPromoteToGeocacheLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PromotedDraft}
     */
    this.logDraftsPromoteToGeocacheLog = function(draft, referenceCode, apiVersion, callback) {
      var postBody = draft;

      // verify the required parameter 'draft' is set
      if (draft === undefined || draft === null) {
        throw new Error("Missing the required parameter 'draft' when calling logDraftsPromoteToGeocacheLog");
      }

      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling logDraftsPromoteToGeocacheLog");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling logDraftsPromoteToGeocacheLog");
      }


      var pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/json-patch+json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = PromotedDraft;

      return this.apiClient.callApi(
        '/v{api-version}/logdrafts/{referenceCode}/promote', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logDraftsUpdateDraft operation.
     * @callback module:api/LogDraftsApi~logDraftsUpdateDraftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogDraft} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a log draft
     * This method will return the log draft edited.
     * @param {String} referenceCode The identifier of the log draft (ex: LD25)
     * @param {module:model/LogDraft} logDraft The log draft to edit.
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Properties you want to return, defaults to referenceCode (default to referenceCode)
     * @param {module:api/LogDraftsApi~logDraftsUpdateDraftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogDraft}
     */
    this.logDraftsUpdateDraft = function(referenceCode, logDraft, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = logDraft;

      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling logDraftsUpdateDraft");
      }

      // verify the required parameter 'logDraft' is set
      if (logDraft === undefined || logDraft === null) {
        throw new Error("Missing the required parameter 'logDraft' when calling logDraftsUpdateDraft");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling logDraftsUpdateDraft");
      }


      var pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/json-patch+json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = LogDraft;

      return this.apiClient.callApi(
        '/v{api-version}/logdrafts/{referenceCode}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
