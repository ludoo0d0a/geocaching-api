/**
 * Geocaching API v1.0
 * Geocaching API version 1.0.
 *
 * OpenAPI spec version: v1
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GeocacheList', 'model/GeocacheLog', 'model/Image', 'model/Souvenir', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GeocacheList'), require('../model/GeocacheLog'), require('../model/Image'), require('../model/Souvenir'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.GeocachingApiV10) {
      root.GeocachingApiV10 = {};
    }
    root.GeocachingApiV10.UsersApi = factory(root.GeocachingApiV10.ApiClient, root.GeocachingApiV10.GeocacheList, root.GeocachingApiV10.GeocacheLog, root.GeocachingApiV10.Image, root.GeocachingApiV10.Souvenir, root.GeocachingApiV10.User);
  }
}(this, function(ApiClient, GeocacheList, GeocacheLog, Image, Souvenir, User) {
  'use strict';

  /**
   * Users service.
   * @module api/UsersApi
   * @version v1
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:api/UsersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the usersGetGeocacheLogs operation.
     * @callback module:api/UsersApi~usersGetGeocacheLogsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GeocacheLog>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of a user&#39;s geocache logs
     * This method will return a list of geocache lists.
     * @param {String} referenceCode user identifier, use \&quot;me\&quot; to get lists for calling user
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip how many lists to skip over (default to 0)
     * @param {Number} opts.take how many lists to retrieve (default to 10)
     * @param {Date} opts.afterDate filters results to logs with logdates after this date (inclusive)
     * @param {Date} opts.beforeDate filters results to logs with logdates before this date (inclusive)
     * @param {String} opts.fields fields you want to return, defaults to referenceCode (default to referenceCode)
     * @param {Boolean} opts.includeArchived flag to include archived logs (default to false)
     * @param {String} opts.logTypes log types to include in response, defaults to all
     * @param {String} opts.expand fields to include with base geocache log object (default to )
     * @param {module:api/UsersApi~usersGetGeocacheLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GeocacheLog>}
     */
    this.usersGetGeocacheLogs = function(referenceCode, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling usersGetGeocacheLogs");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersGetGeocacheLogs");
      }


      var pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      var queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'afterDate': opts['afterDate'],
        'beforeDate': opts['beforeDate'],
        'fields': opts['fields'],
        'includeArchived': opts['includeArchived'],
        'logTypes': opts['logTypes'],
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = [GeocacheLog];

      return this.apiClient.callApi(
        '/v{api-version}/users/{referenceCode}/geocachelogs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetImages operation.
     * @callback module:api/UsersApi~usersGetImagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Image>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the images attached to a user profile
     * This method will return a list of images.
     * @param {String} referenceCode The reference code of the user (example: PR18).
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Amount of images to skip over used for pagination. Defaults to 0. (default to 0)
     * @param {Number} opts.take Amount of images to include in results. Defaults to 10. (default to 10)
     * @param {String} opts.fields Properties you want to return. Defaults to url. (default to url)
     * @param {module:api/UsersApi~usersGetImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Image>}
     */
    this.usersGetImages = function(referenceCode, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling usersGetImages");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersGetImages");
      }


      var pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      var queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = [Image];

      return this.apiClient.callApi(
        '/v{api-version}/users/{referenceCode}/images', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetLists operation.
     * @callback module:api/UsersApi~usersGetListsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GeocacheList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of user&#39;s geocache lists
     * This method will return a list of geocache lists.
     * @param {String} referenceCode user identifier, use \&quot;me\&quot; to get lists for calling user
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {String} opts.types comma delimited list of list types to return (fl, wl, il, bm, pq). Defaults to \&quot;bm\&quot; (default to bm)
     * @param {Number} opts.skip how many lists to skip over (default to 0)
     * @param {Number} opts.take how many lists to retrieve (default to 10)
     * @param {String} opts.fields fields you want to return, defaults to referenceCode (default to referenceCode)
     * @param {module:api/UsersApi~usersGetListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GeocacheList>}
     */
    this.usersGetLists = function(referenceCode, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling usersGetLists");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersGetLists");
      }


      var pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      var queryParams = {
        'types': opts['types'],
        'skip': opts['skip'],
        'take': opts['take'],
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = [GeocacheList];

      return this.apiClient.callApi(
        '/v{api-version}/users/{referenceCode}/lists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetSouvenirs operation.
     * @callback module:api/UsersApi~usersGetSouvenirsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Souvenir>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an account&#39;s souvenirs
     * This method will return a list of souvenirs.
     * @param {String} referenceCode The reference code of the user (example: PR18).
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to 0)
     * @param {Number} opts.take  (default to 20)
     * @param {String} opts.fields Property fields you want to return, defaults to title (default to title)
     * @param {module:api/UsersApi~usersGetSouvenirsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Souvenir>}
     */
    this.usersGetSouvenirs = function(referenceCode, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling usersGetSouvenirs");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersGetSouvenirs");
      }


      var pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      var queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = [Souvenir];

      return this.apiClient.callApi(
        '/v{api-version}/users/{referenceCode}/souvenirs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetUser operation.
     * @callback module:api/UsersApi~usersGetUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user
     * This method will return a user.
     * @param {String} referenceCode The reference code of the user (example: PR18).
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Property fields you want to return, defaults to referenceCode (default to referenceCode)
     * @param {module:api/UsersApi~usersGetUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.usersGetUser = function(referenceCode, apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling usersGetUser");
      }

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersGetUser");
      }


      var pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      var queryParams = {
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/v{api-version}/users/{referenceCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetUsers operation.
     * @callback module:api/UsersApi~usersGetUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of users
     * This method will return a list of users.
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {String} opts.referenceCodes comma delimited list of user reference codes to retrieve (example: PR1,PR2,PR3)
     * @param {String} opts.usernames comma delimited list of usernames to retrieve
     * @param {String} opts.fields fields you want to return, defaults to \&quot;referenceCode\&quot; (default to referenceCode)
     * @param {module:api/UsersApi~usersGetUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.usersGetUsers = function(apiVersion, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersGetUsers");
      }


      var pathParams = {
        'api-version': apiVersion
      };
      var queryParams = {
        'referenceCodes': opts['referenceCodes'],
        'usernames': opts['usernames'],
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/json-patch+json'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/v{api-version}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
