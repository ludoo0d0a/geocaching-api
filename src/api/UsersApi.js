/**
 * API v1.0
 * API version 1.0.
 *
 * The version of the OpenAPI document: v1
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GeocacheList from '../model/GeocacheList';
import GeocacheLog from '../model/GeocacheLog';
import Image from '../model/Image';
import Souvenir from '../model/Souvenir';
import User from '../model/User';

/**
* Users service.
* @module api/UsersApi
* @version v1
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get a list of a user's geocache logs
     * This method will return a list of geocache lists.
     * @param {String} referenceCode user identifier, use \"me\" to get lists for calling user
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip how many lists to skip over (default to 0)
     * @param {Number} opts.take how many lists to retrieve (default to 10)
     * @param {Date} opts.afterDate filters results to logs with logdates after this date (inclusive)
     * @param {Date} opts.beforeDate filters results to logs with logdates before this date (inclusive)
     * @param {String} opts.fields fields you want to return, defaults to referenceCode (default to 'referenceCode')
     * @param {Boolean} opts.includeArchived flag to include archived logs (default to false)
     * @param {String} opts.logTypes log types to include in response, defaults to all
     * @param {String} opts.expand fields to include with base geocache log object (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GeocacheLog>} and HTTP response
     */
    usersGetGeocacheLogsWithHttpInfo(referenceCode, apiVersion, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling usersGetGeocacheLogs");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersGetGeocacheLogs");
      }

      let pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'afterDate': opts['afterDate'],
        'beforeDate': opts['beforeDate'],
        'fields': opts['fields'],
        'includeArchived': opts['includeArchived'],
        'logTypes': opts['logTypes'],
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json-patch+json', 'text/json'];
      let returnType = [GeocacheLog];
      return this.apiClient.callApi(
        '/v{api-version}/users/{referenceCode}/geocachelogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of a user's geocache logs
     * This method will return a list of geocache lists.
     * @param {String} referenceCode user identifier, use \"me\" to get lists for calling user
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip how many lists to skip over (default to 0)
     * @param {Number} opts.take how many lists to retrieve (default to 10)
     * @param {Date} opts.afterDate filters results to logs with logdates after this date (inclusive)
     * @param {Date} opts.beforeDate filters results to logs with logdates before this date (inclusive)
     * @param {String} opts.fields fields you want to return, defaults to referenceCode (default to 'referenceCode')
     * @param {Boolean} opts.includeArchived flag to include archived logs (default to false)
     * @param {String} opts.logTypes log types to include in response, defaults to all
     * @param {String} opts.expand fields to include with base geocache log object (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GeocacheLog>}
     */
    usersGetGeocacheLogs(referenceCode, apiVersion, opts) {
      return this.usersGetGeocacheLogsWithHttpInfo(referenceCode, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the images attached to a user profile
     * This method will return a list of images.
     * @param {String} referenceCode The reference code of the user (example: PR18).
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Amount of images to skip over used for pagination. Defaults to 0. (default to 0)
     * @param {Number} opts.take Amount of images to include in results. Defaults to 10. (default to 10)
     * @param {String} opts.fields Properties you want to return. Defaults to url. (default to 'url')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Image>} and HTTP response
     */
    usersGetImagesWithHttpInfo(referenceCode, apiVersion, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling usersGetImages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersGetImages");
      }

      let pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json-patch+json', 'text/json'];
      let returnType = [Image];
      return this.apiClient.callApi(
        '/v{api-version}/users/{referenceCode}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the images attached to a user profile
     * This method will return a list of images.
     * @param {String} referenceCode The reference code of the user (example: PR18).
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Amount of images to skip over used for pagination. Defaults to 0. (default to 0)
     * @param {Number} opts.take Amount of images to include in results. Defaults to 10. (default to 10)
     * @param {String} opts.fields Properties you want to return. Defaults to url. (default to 'url')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Image>}
     */
    usersGetImages(referenceCode, apiVersion, opts) {
      return this.usersGetImagesWithHttpInfo(referenceCode, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of user's geocache lists
     * This method will return a list of geocache lists.
     * @param {String} referenceCode user identifier, use \"me\" to get lists for calling user
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {String} opts.types comma delimited list of list types to return (fl, wl, il, bm, pq). Defaults to \"bm\" (default to 'bm')
     * @param {Number} opts.skip how many lists to skip over (default to 0)
     * @param {Number} opts.take how many lists to retrieve (default to 10)
     * @param {String} opts.fields fields you want to return, defaults to referenceCode (default to 'referenceCode')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GeocacheList>} and HTTP response
     */
    usersGetListsWithHttpInfo(referenceCode, apiVersion, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling usersGetLists");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersGetLists");
      }

      let pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      let queryParams = {
        'types': opts['types'],
        'skip': opts['skip'],
        'take': opts['take'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json-patch+json', 'text/json'];
      let returnType = [GeocacheList];
      return this.apiClient.callApi(
        '/v{api-version}/users/{referenceCode}/lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of user's geocache lists
     * This method will return a list of geocache lists.
     * @param {String} referenceCode user identifier, use \"me\" to get lists for calling user
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {String} opts.types comma delimited list of list types to return (fl, wl, il, bm, pq). Defaults to \"bm\" (default to 'bm')
     * @param {Number} opts.skip how many lists to skip over (default to 0)
     * @param {Number} opts.take how many lists to retrieve (default to 10)
     * @param {String} opts.fields fields you want to return, defaults to referenceCode (default to 'referenceCode')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GeocacheList>}
     */
    usersGetLists(referenceCode, apiVersion, opts) {
      return this.usersGetListsWithHttpInfo(referenceCode, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an account's souvenirs
     * This method will return a list of souvenirs.
     * @param {String} referenceCode The reference code of the user (example: PR18).
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to 0)
     * @param {Number} opts.take  (default to 20)
     * @param {String} opts.fields Property fields you want to return, defaults to title (default to 'title')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Souvenir>} and HTTP response
     */
    usersGetSouvenirsWithHttpInfo(referenceCode, apiVersion, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling usersGetSouvenirs");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersGetSouvenirs");
      }

      let pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json-patch+json', 'text/json'];
      let returnType = [Souvenir];
      return this.apiClient.callApi(
        '/v{api-version}/users/{referenceCode}/souvenirs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an account's souvenirs
     * This method will return a list of souvenirs.
     * @param {String} referenceCode The reference code of the user (example: PR18).
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to 0)
     * @param {Number} opts.take  (default to 20)
     * @param {String} opts.fields Property fields you want to return, defaults to title (default to 'title')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Souvenir>}
     */
    usersGetSouvenirs(referenceCode, apiVersion, opts) {
      return this.usersGetSouvenirsWithHttpInfo(referenceCode, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a user
     * This method will return a user.
     * @param {String} referenceCode The reference code of the user (example: PR18).
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Property fields you want to return, defaults to referenceCode (default to 'referenceCode')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    usersGetUserWithHttpInfo(referenceCode, apiVersion, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling usersGetUser");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersGetUser");
      }

      let pathParams = {
        'referenceCode': referenceCode,
        'api-version': apiVersion
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json-patch+json', 'text/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/v{api-version}/users/{referenceCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a user
     * This method will return a user.
     * @param {String} referenceCode The reference code of the user (example: PR18).
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Property fields you want to return, defaults to referenceCode (default to 'referenceCode')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    usersGetUser(referenceCode, apiVersion, opts) {
      return this.usersGetUserWithHttpInfo(referenceCode, apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of users
     * This method will return a list of users.
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {String} opts.referenceCodes comma delimited list of user reference codes to retrieve (example: PR1,PR2,PR3)
     * @param {String} opts.usernames comma delimited list of usernames to retrieve
     * @param {String} opts.fields fields you want to return, defaults to \"referenceCode\" (default to 'referenceCode')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/User>} and HTTP response
     */
    usersGetUsersWithHttpInfo(apiVersion, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usersGetUsers");
      }

      let pathParams = {
        'api-version': apiVersion
      };
      let queryParams = {
        'referenceCodes': opts['referenceCodes'],
        'usernames': opts['usernames'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AccessToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json-patch+json', 'text/json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/v{api-version}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of users
     * This method will return a list of users.
     * @param {String} apiVersion The requested API version
     * @param {Object} opts Optional parameters
     * @param {String} opts.referenceCodes comma delimited list of user reference codes to retrieve (example: PR1,PR2,PR3)
     * @param {String} opts.usernames comma delimited list of usernames to retrieve
     * @param {String} opts.fields fields you want to return, defaults to \"referenceCode\" (default to 'referenceCode')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/User>}
     */
    usersGetUsers(apiVersion, opts) {
      return this.usersGetUsersWithHttpInfo(apiVersion, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
