/**
 * Geocaching API v1.0
 * Geocaching API version 1.0.
 *
 * OpenAPI spec version: v1
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Coordinates', 'model/Image', 'model/TrackableLogType', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Coordinates'), require('./Image'), require('./TrackableLogType'), require('./User'));
  } else {
    // Browser globals (root is window)
    if (!root.GeocachingApiV10) {
      root.GeocachingApiV10 = {};
    }
    root.GeocachingApiV10.TrackableLog = factory(root.GeocachingApiV10.ApiClient, root.GeocachingApiV10.Coordinates, root.GeocachingApiV10.Image, root.GeocachingApiV10.TrackableLogType, root.GeocachingApiV10.User);
  }
}(this, function(ApiClient, Coordinates, Image, TrackableLogType, User) {
  'use strict';




  /**
   * The TrackableLog model module.
   * @module model/TrackableLog
   * @version v1
   */

  /**
   * Constructs a new <code>TrackableLog</code>.
   * @alias module:model/TrackableLog
   * @class
   * @param loggedDate {Date} 
   * @param text {String} 
   */
  var exports = function(loggedDate, text) {
    var _this = this;










    _this['loggedDate'] = loggedDate;
    _this['text'] = text;




  };

  /**
   * Constructs a <code>TrackableLog</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TrackableLog} obj Optional instance to populate.
   * @return {module:model/TrackableLog} The populated <code>TrackableLog</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('referenceCode')) {
        obj['referenceCode'] = ApiClient.convertToType(data['referenceCode'], 'String');
      }
      if (data.hasOwnProperty('ownerCode')) {
        obj['ownerCode'] = ApiClient.convertToType(data['ownerCode'], 'String');
      }
      if (data.hasOwnProperty('owner')) {
        obj['owner'] = User.constructFromObject(data['owner']);
      }
      if (data.hasOwnProperty('imageCount')) {
        obj['imageCount'] = ApiClient.convertToType(data['imageCount'], 'Number');
      }
      if (data.hasOwnProperty('url')) {
        obj['url'] = ApiClient.convertToType(data['url'], 'String');
      }
      if (data.hasOwnProperty('geocacheName')) {
        obj['geocacheName'] = ApiClient.convertToType(data['geocacheName'], 'String');
      }
      if (data.hasOwnProperty('images')) {
        obj['images'] = ApiClient.convertToType(data['images'], [Image]);
      }
      if (data.hasOwnProperty('trackableCode')) {
        obj['trackableCode'] = ApiClient.convertToType(data['trackableCode'], 'String');
      }
      if (data.hasOwnProperty('geocacheCode')) {
        obj['geocacheCode'] = ApiClient.convertToType(data['geocacheCode'], 'String');
      }
      if (data.hasOwnProperty('loggedDate')) {
        obj['loggedDate'] = ApiClient.convertToType(data['loggedDate'], 'Date');
      }
      if (data.hasOwnProperty('text')) {
        obj['text'] = ApiClient.convertToType(data['text'], 'String');
      }
      if (data.hasOwnProperty('isRot13Encoded')) {
        obj['isRot13Encoded'] = ApiClient.convertToType(data['isRot13Encoded'], 'Boolean');
      }
      if (data.hasOwnProperty('typeId')) {
        obj['typeId'] = ApiClient.convertToType(data['typeId'], 'Number');
      }
      if (data.hasOwnProperty('trackableLogType')) {
        obj['trackableLogType'] = TrackableLogType.constructFromObject(data['trackableLogType']);
      }
      if (data.hasOwnProperty('coordinates')) {
        obj['coordinates'] = Coordinates.constructFromObject(data['coordinates']);
      }
    }
    return obj;
  }

  /**
   * @member {String} referenceCode
   */
  exports.prototype['referenceCode'] = undefined;
  /**
   * @member {String} ownerCode
   */
  exports.prototype['ownerCode'] = undefined;
  /**
   * @member {module:model/User} owner
   */
  exports.prototype['owner'] = undefined;
  /**
   * @member {Number} imageCount
   */
  exports.prototype['imageCount'] = undefined;
  /**
   * @member {String} url
   */
  exports.prototype['url'] = undefined;
  /**
   * @member {String} geocacheName
   */
  exports.prototype['geocacheName'] = undefined;
  /**
   * @member {Array.<module:model/Image>} images
   */
  exports.prototype['images'] = undefined;
  /**
   * @member {String} trackableCode
   */
  exports.prototype['trackableCode'] = undefined;
  /**
   * @member {String} geocacheCode
   */
  exports.prototype['geocacheCode'] = undefined;
  /**
   * @member {Date} loggedDate
   */
  exports.prototype['loggedDate'] = undefined;
  /**
   * @member {String} text
   */
  exports.prototype['text'] = undefined;
  /**
   * @member {Boolean} isRot13Encoded
   */
  exports.prototype['isRot13Encoded'] = undefined;
  /**
   * @member {Number} typeId
   */
  exports.prototype['typeId'] = undefined;
  /**
   * @member {module:model/TrackableLogType} trackableLogType
   */
  exports.prototype['trackableLogType'] = undefined;
  /**
   * @member {module:model/Coordinates} coordinates
   */
  exports.prototype['coordinates'] = undefined;



  return exports;
}));


