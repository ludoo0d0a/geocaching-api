/**
 * Geocaching API v1.0
 * Geocaching API version 1.0.
 *
 * OpenAPI spec version: v1
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Coordinates', 'model/GeocacheCount', 'model/GeocacheLimit', 'model/TrackableCount'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Coordinates'), require('./GeocacheCount'), require('./GeocacheLimit'), require('./TrackableCount'));
  } else {
    // Browser globals (root is window)
    if (!root.GeocachingApiV10) {
      root.GeocachingApiV10 = {};
    }
    root.GeocachingApiV10.User = factory(root.GeocachingApiV10.ApiClient, root.GeocachingApiV10.Coordinates, root.GeocachingApiV10.GeocacheCount, root.GeocachingApiV10.GeocacheLimit, root.GeocachingApiV10.TrackableCount);
  }
}(this, function(ApiClient, Coordinates, GeocacheCount, GeocacheLimit, TrackableCount) {
  'use strict';




  /**
   * The User model module.
   * @module model/User
   * @version v1
   */

  /**
   * Constructs a new <code>User</code>.
   * @alias module:model/User
   * @class
   */
  var exports = function() {
    var _this = this;


















  };

  /**
   * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/User} obj Optional instance to populate.
   * @return {module:model/User} The populated <code>User</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('membershipLevelId')) {
        obj['membershipLevelId'] = ApiClient.convertToType(data['membershipLevelId'], 'Number');
      }
      if (data.hasOwnProperty('joinedDateUtc')) {
        obj['joinedDateUtc'] = ApiClient.convertToType(data['joinedDateUtc'], 'Date');
      }
      if (data.hasOwnProperty('findCount')) {
        obj['findCount'] = ApiClient.convertToType(data['findCount'], 'Number');
      }
      if (data.hasOwnProperty('hideCount')) {
        obj['hideCount'] = ApiClient.convertToType(data['hideCount'], 'Number');
      }
      if (data.hasOwnProperty('favoritePoints')) {
        obj['favoritePoints'] = ApiClient.convertToType(data['favoritePoints'], 'Number');
      }
      if (data.hasOwnProperty('homeCoordinates')) {
        obj['homeCoordinates'] = Coordinates.constructFromObject(data['homeCoordinates']);
      }
      if (data.hasOwnProperty('geocacheLimits')) {
        obj['geocacheLimits'] = GeocacheLimit.constructFromObject(data['geocacheLimits']);
      }
      if (data.hasOwnProperty('profileText')) {
        obj['profileText'] = ApiClient.convertToType(data['profileText'], 'String');
      }
      if (data.hasOwnProperty('bannerUrl')) {
        obj['bannerUrl'] = ApiClient.convertToType(data['bannerUrl'], 'String');
      }
      if (data.hasOwnProperty('url')) {
        obj['url'] = ApiClient.convertToType(data['url'], 'String');
      }
      if (data.hasOwnProperty('geocacheFindCounts')) {
        obj['geocacheFindCounts'] = ApiClient.convertToType(data['geocacheFindCounts'], [GeocacheCount]);
      }
      if (data.hasOwnProperty('geocacheHideCounts')) {
        obj['geocacheHideCounts'] = ApiClient.convertToType(data['geocacheHideCounts'], [GeocacheCount]);
      }
      if (data.hasOwnProperty('trackableFindCounts')) {
        obj['trackableFindCounts'] = ApiClient.convertToType(data['trackableFindCounts'], [TrackableCount]);
      }
      if (data.hasOwnProperty('trackableOwnedCounts')) {
        obj['trackableOwnedCounts'] = ApiClient.convertToType(data['trackableOwnedCounts'], [TrackableCount]);
      }
      if (data.hasOwnProperty('referenceCode')) {
        obj['referenceCode'] = ApiClient.convertToType(data['referenceCode'], 'String');
      }
      if (data.hasOwnProperty('username')) {
        obj['username'] = ApiClient.convertToType(data['username'], 'String');
      }
      if (data.hasOwnProperty('avatarUrl')) {
        obj['avatarUrl'] = ApiClient.convertToType(data['avatarUrl'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {Number} membershipLevelId
   */
  exports.prototype['membershipLevelId'] = undefined;
  /**
   * @member {Date} joinedDateUtc
   */
  exports.prototype['joinedDateUtc'] = undefined;
  /**
   * @member {Number} findCount
   */
  exports.prototype['findCount'] = undefined;
  /**
   * @member {Number} hideCount
   */
  exports.prototype['hideCount'] = undefined;
  /**
   * @member {Number} favoritePoints
   */
  exports.prototype['favoritePoints'] = undefined;
  /**
   * @member {module:model/Coordinates} homeCoordinates
   */
  exports.prototype['homeCoordinates'] = undefined;
  /**
   * @member {module:model/GeocacheLimit} geocacheLimits
   */
  exports.prototype['geocacheLimits'] = undefined;
  /**
   * @member {String} profileText
   */
  exports.prototype['profileText'] = undefined;
  /**
   * @member {String} bannerUrl
   */
  exports.prototype['bannerUrl'] = undefined;
  /**
   * @member {String} url
   */
  exports.prototype['url'] = undefined;
  /**
   * @member {Array.<module:model/GeocacheCount>} geocacheFindCounts
   */
  exports.prototype['geocacheFindCounts'] = undefined;
  /**
   * @member {Array.<module:model/GeocacheCount>} geocacheHideCounts
   */
  exports.prototype['geocacheHideCounts'] = undefined;
  /**
   * @member {Array.<module:model/TrackableCount>} trackableFindCounts
   */
  exports.prototype['trackableFindCounts'] = undefined;
  /**
   * @member {Array.<module:model/TrackableCount>} trackableOwnedCounts
   */
  exports.prototype['trackableOwnedCounts'] = undefined;
  /**
   * @member {String} referenceCode
   */
  exports.prototype['referenceCode'] = undefined;
  /**
   * @member {String} username
   */
  exports.prototype['username'] = undefined;
  /**
   * @member {String} avatarUrl
   */
  exports.prototype['avatarUrl'] = undefined;



  return exports;
}));


