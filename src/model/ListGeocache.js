/**
 * Geocaching API v1.0
 * Geocaching API version 1.0.
 *
 * OpenAPI spec version: v1
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdditionalWaypoint', 'model/Attribute', 'model/Coordinates', 'model/GeocacheLog', 'model/GeocacheSize', 'model/GeocacheType', 'model/Image', 'model/Location', 'model/Trackable', 'model/User', 'model/UserData', 'model/UserWaypoint'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AdditionalWaypoint'), require('./Attribute'), require('./Coordinates'), require('./GeocacheLog'), require('./GeocacheSize'), require('./GeocacheType'), require('./Image'), require('./Location'), require('./Trackable'), require('./User'), require('./UserData'), require('./UserWaypoint'));
  } else {
    // Browser globals (root is window)
    if (!root.GeocachingApiV10) {
      root.GeocachingApiV10 = {};
    }
    root.GeocachingApiV10.ListGeocache = factory(root.GeocachingApiV10.ApiClient, root.GeocachingApiV10.AdditionalWaypoint, root.GeocachingApiV10.Attribute, root.GeocachingApiV10.Coordinates, root.GeocachingApiV10.GeocacheLog, root.GeocachingApiV10.GeocacheSize, root.GeocachingApiV10.GeocacheType, root.GeocachingApiV10.Image, root.GeocachingApiV10.Location, root.GeocachingApiV10.Trackable, root.GeocachingApiV10.User, root.GeocachingApiV10.UserData, root.GeocachingApiV10.UserWaypoint);
  }
}(this, function(ApiClient, AdditionalWaypoint, Attribute, Coordinates, GeocacheLog, GeocacheSize, GeocacheType, Image, Location, Trackable, User, UserData, UserWaypoint) {
  'use strict';




  /**
   * The ListGeocache model module.
   * @module model/ListGeocache
   * @version v1
   */

  /**
   * Constructs a new <code>ListGeocache</code>.
   * @alias module:model/ListGeocache
   * @class
   */
  var exports = function() {
    var _this = this;







































  };

  /**
   * Constructs a <code>ListGeocache</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ListGeocache} obj Optional instance to populate.
   * @return {module:model/ListGeocache} The populated <code>ListGeocache</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('listItemName')) {
        obj['listItemName'] = ApiClient.convertToType(data['listItemName'], 'String');
      }
      if (data.hasOwnProperty('referenceCode')) {
        obj['referenceCode'] = ApiClient.convertToType(data['referenceCode'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('difficulty')) {
        obj['difficulty'] = ApiClient.convertToType(data['difficulty'], 'Number');
      }
      if (data.hasOwnProperty('terrain')) {
        obj['terrain'] = ApiClient.convertToType(data['terrain'], 'Number');
      }
      if (data.hasOwnProperty('favoritePoints')) {
        obj['favoritePoints'] = ApiClient.convertToType(data['favoritePoints'], 'Number');
      }
      if (data.hasOwnProperty('findCount')) {
        obj['findCount'] = ApiClient.convertToType(data['findCount'], 'Number');
      }
      if (data.hasOwnProperty('trackableCount')) {
        obj['trackableCount'] = ApiClient.convertToType(data['trackableCount'], 'Number');
      }
      if (data.hasOwnProperty('placedDate')) {
        obj['placedDate'] = ApiClient.convertToType(data['placedDate'], 'Date');
      }
      if (data.hasOwnProperty('publishedDate')) {
        obj['publishedDate'] = ApiClient.convertToType(data['publishedDate'], 'Date');
      }
      if (data.hasOwnProperty('eventEndDate')) {
        obj['eventEndDate'] = ApiClient.convertToType(data['eventEndDate'], 'Date');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('geocacheType')) {
        obj['geocacheType'] = GeocacheType.constructFromObject(data['geocacheType']);
      }
      if (data.hasOwnProperty('size')) {
        obj['size'] = ApiClient.convertToType(data['size'], 'String');
      }
      if (data.hasOwnProperty('geocacheSize')) {
        obj['geocacheSize'] = GeocacheSize.constructFromObject(data['geocacheSize']);
      }
      if (data.hasOwnProperty('userData')) {
        obj['userData'] = UserData.constructFromObject(data['userData']);
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
      if (data.hasOwnProperty('location')) {
        obj['location'] = Location.constructFromObject(data['location']);
      }
      if (data.hasOwnProperty('postedCoordinates')) {
        obj['postedCoordinates'] = Coordinates.constructFromObject(data['postedCoordinates']);
      }
      if (data.hasOwnProperty('lastVisitedDate')) {
        obj['lastVisitedDate'] = ApiClient.convertToType(data['lastVisitedDate'], 'Date');
      }
      if (data.hasOwnProperty('ownerCode')) {
        obj['ownerCode'] = ApiClient.convertToType(data['ownerCode'], 'String');
      }
      if (data.hasOwnProperty('owner')) {
        obj['owner'] = User.constructFromObject(data['owner']);
      }
      if (data.hasOwnProperty('ownerAlias')) {
        obj['ownerAlias'] = ApiClient.convertToType(data['ownerAlias'], 'String');
      }
      if (data.hasOwnProperty('isPremiumOnly')) {
        obj['isPremiumOnly'] = ApiClient.convertToType(data['isPremiumOnly'], 'Boolean');
      }
      if (data.hasOwnProperty('shortDescription')) {
        obj['shortDescription'] = ApiClient.convertToType(data['shortDescription'], 'String');
      }
      if (data.hasOwnProperty('longDescription')) {
        obj['longDescription'] = ApiClient.convertToType(data['longDescription'], 'String');
      }
      if (data.hasOwnProperty('hints')) {
        obj['hints'] = ApiClient.convertToType(data['hints'], 'String');
      }
      if (data.hasOwnProperty('attributes')) {
        obj['attributes'] = ApiClient.convertToType(data['attributes'], [Attribute]);
      }
      if (data.hasOwnProperty('ianaTimezoneId')) {
        obj['ianaTimezoneId'] = ApiClient.convertToType(data['ianaTimezoneId'], 'String');
      }
      if (data.hasOwnProperty('relatedWebPage')) {
        obj['relatedWebPage'] = ApiClient.convertToType(data['relatedWebPage'], 'String');
      }
      if (data.hasOwnProperty('backgroundImageUrl')) {
        obj['backgroundImageUrl'] = ApiClient.convertToType(data['backgroundImageUrl'], 'String');
      }
      if (data.hasOwnProperty('url')) {
        obj['url'] = ApiClient.convertToType(data['url'], 'String');
      }
      if (data.hasOwnProperty('containsHtml')) {
        obj['containsHtml'] = ApiClient.convertToType(data['containsHtml'], 'Boolean');
      }
      if (data.hasOwnProperty('additionalWaypoints')) {
        obj['additionalWaypoints'] = ApiClient.convertToType(data['additionalWaypoints'], [AdditionalWaypoint]);
      }
      if (data.hasOwnProperty('trackables')) {
        obj['trackables'] = ApiClient.convertToType(data['trackables'], [Trackable]);
      }
      if (data.hasOwnProperty('geocacheLogs')) {
        obj['geocacheLogs'] = ApiClient.convertToType(data['geocacheLogs'], [GeocacheLog]);
      }
      if (data.hasOwnProperty('images')) {
        obj['images'] = ApiClient.convertToType(data['images'], [Image]);
      }
      if (data.hasOwnProperty('userWaypoints')) {
        obj['userWaypoints'] = ApiClient.convertToType(data['userWaypoints'], [UserWaypoint]);
      }
    }
    return obj;
  }

  /**
   * @member {String} listItemName
   */
  exports.prototype['listItemName'] = undefined;
  /**
   * This code uniquely identifies the geocache
   * @member {String} referenceCode
   */
  exports.prototype['referenceCode'] = undefined;
  /**
   * Name of the Geocache
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Difficulty of cache between 1.0 and 5.0
   * @member {Number} difficulty
   */
  exports.prototype['difficulty'] = undefined;
  /**
   * Terrain of cache between 1.0 and 5.0
   * @member {Number} terrain
   */
  exports.prototype['terrain'] = undefined;
  /**
   * The number of favorite points on the Geocache
   * @member {Number} favoritePoints
   */
  exports.prototype['favoritePoints'] = undefined;
  /**
   * @member {Number} findCount
   */
  exports.prototype['findCount'] = undefined;
  /**
   * The number of trackables on the Geocache
   * @member {Number} trackableCount
   */
  exports.prototype['trackableCount'] = undefined;
  /**
   * Date the geocache was placed (If the Geocache is an event then this represents the date of the event).
   * @member {Date} placedDate
   */
  exports.prototype['placedDate'] = undefined;
  /**
   * @member {Date} publishedDate
   */
  exports.prototype['publishedDate'] = undefined;
  /**
   * @member {Date} eventEndDate
   */
  exports.prototype['eventEndDate'] = undefined;
  /**
   * The type of Geocache
   * @member {module:model/ListGeocache.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * @member {module:model/GeocacheType} geocacheType
   */
  exports.prototype['geocacheType'] = undefined;
  /**
   * Container or Size of cache
   * @member {module:model/ListGeocache.SizeEnum} size
   */
  exports.prototype['size'] = undefined;
  /**
   * @member {module:model/GeocacheSize} geocacheSize
   */
  exports.prototype['geocacheSize'] = undefined;
  /**
   * @member {module:model/UserData} userData
   */
  exports.prototype['userData'] = undefined;
  /**
   * The state of the Geocache
   * @member {module:model/ListGeocache.StatusEnum} status
   */
  exports.prototype['status'] = undefined;
  /**
   * @member {module:model/Location} location
   */
  exports.prototype['location'] = undefined;
  /**
   * The posted coordinates of the Geocache
   * @member {module:model/Coordinates} postedCoordinates
   */
  exports.prototype['postedCoordinates'] = undefined;
  /**
   * @member {Date} lastVisitedDate
   */
  exports.prototype['lastVisitedDate'] = undefined;
  /**
   * The reference code of the geocache owner
   * @member {String} ownerCode
   */
  exports.prototype['ownerCode'] = undefined;
  /**
   * @member {module:model/User} owner
   */
  exports.prototype['owner'] = undefined;
  /**
   * @member {String} ownerAlias
   */
  exports.prototype['ownerAlias'] = undefined;
  /**
   * @member {Boolean} isPremiumOnly
   */
  exports.prototype['isPremiumOnly'] = undefined;
  /**
   * Summary or short description of the geocache.
   * @member {String} shortDescription
   */
  exports.prototype['shortDescription'] = undefined;
  /**
   * Detailed description of the geocache.
   * @member {String} longDescription
   */
  exports.prototype['longDescription'] = undefined;
  /**
   * Hints to find the geocache.
   * @member {String} hints
   */
  exports.prototype['hints'] = undefined;
  /**
   * @member {Array.<module:model/Attribute>} attributes
   */
  exports.prototype['attributes'] = undefined;
  /**
   * @member {String} ianaTimezoneId
   */
  exports.prototype['ianaTimezoneId'] = undefined;
  /**
   * @member {String} relatedWebPage
   */
  exports.prototype['relatedWebPage'] = undefined;
  /**
   * @member {String} backgroundImageUrl
   */
  exports.prototype['backgroundImageUrl'] = undefined;
  /**
   * @member {String} url
   */
  exports.prototype['url'] = undefined;
  /**
   * @member {Boolean} containsHtml
   */
  exports.prototype['containsHtml'] = undefined;
  /**
   * @member {Array.<module:model/AdditionalWaypoint>} additionalWaypoints
   */
  exports.prototype['additionalWaypoints'] = undefined;
  /**
   * @member {Array.<module:model/Trackable>} trackables
   */
  exports.prototype['trackables'] = undefined;
  /**
   * @member {Array.<module:model/GeocacheLog>} geocacheLogs
   */
  exports.prototype['geocacheLogs'] = undefined;
  /**
   * @member {Array.<module:model/Image>} images
   */
  exports.prototype['images'] = undefined;
  /**
   * @member {Array.<module:model/UserWaypoint>} userWaypoints
   */
  exports.prototype['userWaypoints'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "Traditional"
     * @const
     */
    "Traditional": "Traditional",
    /**
     * value: "MultiCache"
     * @const
     */
    "MultiCache": "MultiCache",
    /**
     * value: "Virtual"
     * @const
     */
    "Virtual": "Virtual",
    /**
     * value: "Letterbox"
     * @const
     */
    "Letterbox": "Letterbox",
    /**
     * value: "Event"
     * @const
     */
    "Event": "Event",
    /**
     * value: "Mystery"
     * @const
     */
    "Mystery": "Mystery",
    /**
     * value: "ProjectApe"
     * @const
     */
    "ProjectApe": "ProjectApe",
    /**
     * value: "Webcam"
     * @const
     */
    "Webcam": "Webcam",
    /**
     * value: "Locationless"
     * @const
     */
    "Locationless": "Locationless",
    /**
     * value: "Cito"
     * @const
     */
    "Cito": "Cito",
    /**
     * value: "EarthCache"
     * @const
     */
    "EarthCache": "EarthCache",
    /**
     * value: "MegaEvent"
     * @const
     */
    "MegaEvent": "MegaEvent",
    /**
     * value: "GpsAdventuresExhibit"
     * @const
     */
    "GpsAdventuresExhibit": "GpsAdventuresExhibit",
    /**
     * value: "Wherigo"
     * @const
     */
    "Wherigo": "Wherigo",
    /**
     * value: "LostAndFoundEvent"
     * @const
     */
    "LostAndFoundEvent": "LostAndFoundEvent",
    /**
     * value: "GeocachingHq"
     * @const
     */
    "GeocachingHq": "GeocachingHq",
    /**
     * value: "LostAndFoundCelebration"
     * @const
     */
    "LostAndFoundCelebration": "LostAndFoundCelebration",
    /**
     * value: "BlockParty"
     * @const
     */
    "BlockParty": "BlockParty",
    /**
     * value: "GigaEvent"
     * @const
     */
    "GigaEvent": "GigaEvent"  };

  /**
   * Allowed values for the <code>size</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SizeEnum = {
    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",
    /**
     * value: "Micro"
     * @const
     */
    "Micro": "Micro",
    /**
     * value: "Regular"
     * @const
     */
    "Regular": "Regular",
    /**
     * value: "Large"
     * @const
     */
    "Large": "Large",
    /**
     * value: "Virtual"
     * @const
     */
    "Virtual": "Virtual",
    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",
    /**
     * value: "Small"
     * @const
     */
    "Small": "Small"  };

  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "Unpublished"
     * @const
     */
    "Unpublished": "Unpublished",
    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",
    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",
    /**
     * value: "Locked"
     * @const
     */
    "Locked": "Locked",
    /**
     * value: "Archived"
     * @const
     */
    "Archived": "Archived"  };


  return exports;
}));


