{"version":3,"sources":["../app.js"],"names":["express","require","passport","morgan","session","bodyParser","cookieParser","methodOverride","expressLayouts","GeocachingApi","config","port","process","env","PORT","ip","IP","serializeUser","user","done","deserializeUser","obj","api","use","strategy","app","set","__dirname","json","secret","resave","saveUninitialized","initialize","get","req","res","token","oauth_token","render","ensureAuthenticated","oauth","_tokens","getYourUserProfile","err","data","error","JSON","stringify","serializeTojson","authenticate","callbackRoute","failureRedirect","redirect","logout","listen","console","log","next","isAuthenticated","o","parse"],"mappings":"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","sourcesContent":["var express = require('express'),\n    passport = require('passport'),\n    // util = require('util'),\n    morgan = require('morgan'),\n    session = require('express-session'),\n    bodyParser = require('body-parser'),\n    cookieParser = require('cookie-parser'),\n    methodOverride = require('method-override'),\n    expressLayouts = require('express-ejs-layouts'),\n    // GeocachingApi = require('geocaching-api'),\n    GeocachingApi = require('../../src/geocaching-api'),\n    config = require('../../config-api');\n\nvar port = process.env.PORT || 3000;\nvar ip = process.env.IP || 'localhost';\n\n/*\nvar config = {\n      clientID: \"--insert-geocaching-app-id-here--\",\n      clientSecret: \"--insert-geocaching-app-secret-here--\";,\n      callbackURL: 'http://localhost:'+port+'/auth/geocaching/callback'\n}\n*/\n\n// Passport session setup.\n//   To support persistent login sessions, Passport needs to be able to\n//   serialize users into and deserialize users out of the session.  Typically,\n//   this will be as simple as storing the user ID when serializing, and finding\n//   the user by ID when deserializing.  However, since this example does not\n//   have a database of user records, the complete Geocaching profile is serialized\n//   and deserialized.\npassport.serializeUser(function(user, done) {\n    done(null, user);\n});\n\npassport.deserializeUser(function(obj, done) {\n    done(null, obj);\n});\n\n\n// Use the GeocachingStrategy within GeocachingApi for Passsport.\nconst api = new GeocachingApi(config);\n\npassport.use(api.strategy);\n\nvar app = express();\n\n// configure Express\napp.set('views', __dirname + '/views');\napp.set('view engine', 'ejs');\napp.use(expressLayouts);\napp.set('layout', 'layout');\napp.use(morgan('combined'))\napp.use(cookieParser());\napp.use(bodyParser.json());\n\napp.use(methodOverride());\napp.use(session({\n    secret: 'keyboard cat',\n    resave: false,\n    saveUninitialized: true\n}));\n\n// Initialize Passport!  Also use passport.session() middleware, to support\n// persistent login sessions (recommended).\napp.use(passport.initialize());\napp.use(passport.session());\napp.use(express.static(__dirname + '/public'));\n\napp.get('/', function(req, res) {\n    var token = api.oauth_token || '{Undefined}';\n    res.render('index', { user: req.user, token: token });\n});\n\napp.get('/account', ensureAuthenticated, function(req, res) {\n    res.render('account', { user: req.user, api: api, oauth: api._tokens || {}, token: req.token || (req.user && req.user.token) || '?' });\n});\n\napp.get('/test', ensureAuthenticated, function(req, res) {\n    if (api) {\n        api.getYourUserProfile({}, function(err, user) {\n            var data = '',\n                error = '',\n                token = api.oauth_token || '{Undefined}';\n            if (err) {\n                error = JSON.stringify(err);\n            } else {\n                data = JSON.stringify({ user });\n            }\n            res.render('test', { user: serializeTojson(user) , token: token, data: data, error: error });\n        });\n    }\n});\n\n\napp.get('/login', function(req, res) {\n    res.render('login', { user: req.user, token: req.token || (req.user && req.user.token) });\n});\n\n// GET /auth/geocaching\n//   Use passport.authenticate() as route middleware to authenticate the\n//   request.  The first step in Geocaching authentication will involve\n//   redirecting the user to geocaching.com.  After authorization, Geocaching will\n//   redirect the user back to this application at /auth/geocaching/callback\napp.get('/auth/geocaching',\n    passport.authenticate('geocaching'),\n    function(req, res) {\n        // The request will be redirected to Geocaching for authentication, so this\n        // function will not be called.\n    });\n\n// GET /auth/callback  (This url need sto be registed on Geocaching platform to be allowed)\n//   Use passport.authenticate() as route middleware to authenticate the\n//   request.  If authentication fails, the user will be redirected back to the\n//   login page.  Otherwise, the primary route function function will be called,\n//   which, in this example, will redirect the user to the home page.\napp.get(config.callbackRoute,\n    passport.authenticate('geocaching', { failureRedirect: '/login' }),\n    function(req, res) {\n        res.redirect('/');\n    });\n\napp.get('/logout', function(req, res) {\n    req.logout();\n    res.redirect('/');\n});\n\napp.listen(port, function() {\n    console.log('Example app for geocaching-api is listening on http://%s:%d', ip, port);\n});\n\n\n// Simple route middleware to ensure user is authenticated.\n//   Use this route middleware on any resource that needs to be protected.  If\n//   the request is authenticated (typically via a persistent login session),\n//   the request will proceed.  Otherwise, the user will be redirected to the\n//   login page.\nfunction ensureAuthenticated(req, res, next) {\n    if (req.isAuthenticated()) { return next(); }\n    res.redirect('/login')\n}\n\n/** \n * Tip to serialize properly inner objects like homeCoordinates\n * */\nfunction serializeTojson(o) {\n    return JSON.parse(JSON.stringify(o));\n}"],"file":"app.js"}