/**
 * API v1.0
 * API version 1.0.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Coordinates from './Coordinates';
import Image from './Image';
import TrackableLogType from './TrackableLogType';
import User from './User';

/**
 * The TrackableLog model module.
 * @module model/TrackableLog
 * @version 1.0.0-oas3
 */
class TrackableLog {
    /**
     * Constructs a new <code>TrackableLog</code>.
     * @alias module:model/TrackableLog
     * @param loggedDate {Date} 
     * @param text {String} 
     */
    constructor(loggedDate, text) { 
        
        TrackableLog.initialize(this, loggedDate, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, loggedDate, text) { 
        obj['loggedDate'] = loggedDate;
        obj['text'] = text;
    }

    /**
     * Constructs a <code>TrackableLog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrackableLog} obj Optional instance to populate.
     * @return {module:model/TrackableLog} The populated <code>TrackableLog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrackableLog();

            if (data.hasOwnProperty('referenceCode')) {
                obj['referenceCode'] = ApiClient.convertToType(data['referenceCode'], 'String');
            }
            if (data.hasOwnProperty('ownerCode')) {
                obj['ownerCode'] = ApiClient.convertToType(data['ownerCode'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = User.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('imageCount')) {
                obj['imageCount'] = ApiClient.convertToType(data['imageCount'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('geocacheName')) {
                obj['geocacheName'] = ApiClient.convertToType(data['geocacheName'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [Image]);
            }
            if (data.hasOwnProperty('trackableCode')) {
                obj['trackableCode'] = ApiClient.convertToType(data['trackableCode'], 'String');
            }
            if (data.hasOwnProperty('geocacheCode')) {
                obj['geocacheCode'] = ApiClient.convertToType(data['geocacheCode'], 'String');
            }
            if (data.hasOwnProperty('loggedDate')) {
                obj['loggedDate'] = ApiClient.convertToType(data['loggedDate'], 'Date');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('isRot13Encoded')) {
                obj['isRot13Encoded'] = ApiClient.convertToType(data['isRot13Encoded'], 'Boolean');
            }
            if (data.hasOwnProperty('typeId')) {
                obj['typeId'] = ApiClient.convertToType(data['typeId'], 'Number');
            }
            if (data.hasOwnProperty('trackableLogType')) {
                obj['trackableLogType'] = TrackableLogType.constructFromObject(data['trackableLogType']);
            }
            if (data.hasOwnProperty('coordinates')) {
                obj['coordinates'] = Coordinates.constructFromObject(data['coordinates']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} referenceCode
 */
TrackableLog.prototype['referenceCode'] = undefined;

/**
 * @member {String} ownerCode
 */
TrackableLog.prototype['ownerCode'] = undefined;

/**
 * @member {module:model/User} owner
 */
TrackableLog.prototype['owner'] = undefined;

/**
 * @member {Number} imageCount
 */
TrackableLog.prototype['imageCount'] = undefined;

/**
 * @member {String} url
 */
TrackableLog.prototype['url'] = undefined;

/**
 * @member {String} geocacheName
 */
TrackableLog.prototype['geocacheName'] = undefined;

/**
 * @member {Array.<module:model/Image>} images
 */
TrackableLog.prototype['images'] = undefined;

/**
 * @member {String} trackableCode
 */
TrackableLog.prototype['trackableCode'] = undefined;

/**
 * @member {String} geocacheCode
 */
TrackableLog.prototype['geocacheCode'] = undefined;

/**
 * @member {Date} loggedDate
 */
TrackableLog.prototype['loggedDate'] = undefined;

/**
 * @member {String} text
 */
TrackableLog.prototype['text'] = undefined;

/**
 * @member {Boolean} isRot13Encoded
 */
TrackableLog.prototype['isRot13Encoded'] = undefined;

/**
 * @member {Number} typeId
 */
TrackableLog.prototype['typeId'] = undefined;

/**
 * @member {module:model/TrackableLogType} trackableLogType
 */
TrackableLog.prototype['trackableLogType'] = undefined;

/**
 * @member {module:model/Coordinates} coordinates
 */
TrackableLog.prototype['coordinates'] = undefined;






export default TrackableLog;

