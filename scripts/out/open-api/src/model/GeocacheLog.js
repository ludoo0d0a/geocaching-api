/**
 * API v1.0
 * API version 1.0.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Coordinates from './Coordinates';
import GeocacheLogType from './GeocacheLogType';
import Image from './Image';
import User from './User';

/**
 * The GeocacheLog model module.
 * @module model/GeocacheLog
 * @version 1.0.0-oas3
 */
class GeocacheLog {
    /**
     * Constructs a new <code>GeocacheLog</code>.
     * @alias module:model/GeocacheLog
     * @param loggedDate {Date} 
     * @param text {String} 
     * @param geocacheCode {String} 
     */
    constructor(loggedDate, text, geocacheCode) { 
        
        GeocacheLog.initialize(this, loggedDate, text, geocacheCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, loggedDate, text, geocacheCode) { 
        obj['loggedDate'] = loggedDate;
        obj['text'] = text;
        obj['geocacheCode'] = geocacheCode;
    }

    /**
     * Constructs a <code>GeocacheLog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeocacheLog} obj Optional instance to populate.
     * @return {module:model/GeocacheLog} The populated <code>GeocacheLog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeocacheLog();

            if (data.hasOwnProperty('referenceCode')) {
                obj['referenceCode'] = ApiClient.convertToType(data['referenceCode'], 'String');
            }
            if (data.hasOwnProperty('ownerCode')) {
                obj['ownerCode'] = ApiClient.convertToType(data['ownerCode'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = User.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('imageCount')) {
                obj['imageCount'] = ApiClient.convertToType(data['imageCount'], 'Number');
            }
            if (data.hasOwnProperty('isEncoded')) {
                obj['isEncoded'] = ApiClient.convertToType(data['isEncoded'], 'Boolean');
            }
            if (data.hasOwnProperty('isArchived')) {
                obj['isArchived'] = ApiClient.convertToType(data['isArchived'], 'Boolean');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [Image]);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('geocacheName')) {
                obj['geocacheName'] = ApiClient.convertToType(data['geocacheName'], 'String');
            }
            if (data.hasOwnProperty('ianaTimezoneId')) {
                obj['ianaTimezoneId'] = ApiClient.convertToType(data['ianaTimezoneId'], 'String');
            }
            if (data.hasOwnProperty('loggedDate')) {
                obj['loggedDate'] = ApiClient.convertToType(data['loggedDate'], 'Date');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('geocacheLogType')) {
                obj['geocacheLogType'] = GeocacheLogType.constructFromObject(data['geocacheLogType']);
            }
            if (data.hasOwnProperty('updatedCoordinates')) {
                obj['updatedCoordinates'] = Coordinates.constructFromObject(data['updatedCoordinates']);
            }
            if (data.hasOwnProperty('geocacheCode')) {
                obj['geocacheCode'] = ApiClient.convertToType(data['geocacheCode'], 'String');
            }
            if (data.hasOwnProperty('usedFavoritePoint')) {
                obj['usedFavoritePoint'] = ApiClient.convertToType(data['usedFavoritePoint'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {String} referenceCode
 */
GeocacheLog.prototype['referenceCode'] = undefined;

/**
 * @member {String} ownerCode
 */
GeocacheLog.prototype['ownerCode'] = undefined;

/**
 * @member {module:model/User} owner
 */
GeocacheLog.prototype['owner'] = undefined;

/**
 * @member {Number} imageCount
 */
GeocacheLog.prototype['imageCount'] = undefined;

/**
 * @member {Boolean} isEncoded
 */
GeocacheLog.prototype['isEncoded'] = undefined;

/**
 * @member {Boolean} isArchived
 */
GeocacheLog.prototype['isArchived'] = undefined;

/**
 * @member {Array.<module:model/Image>} images
 */
GeocacheLog.prototype['images'] = undefined;

/**
 * @member {String} url
 */
GeocacheLog.prototype['url'] = undefined;

/**
 * @member {String} geocacheName
 */
GeocacheLog.prototype['geocacheName'] = undefined;

/**
 * @member {String} ianaTimezoneId
 */
GeocacheLog.prototype['ianaTimezoneId'] = undefined;

/**
 * @member {Date} loggedDate
 */
GeocacheLog.prototype['loggedDate'] = undefined;

/**
 * @member {String} text
 */
GeocacheLog.prototype['text'] = undefined;

/**
 * @member {String} type
 */
GeocacheLog.prototype['type'] = undefined;

/**
 * @member {module:model/GeocacheLogType} geocacheLogType
 */
GeocacheLog.prototype['geocacheLogType'] = undefined;

/**
 * @member {module:model/Coordinates} updatedCoordinates
 */
GeocacheLog.prototype['updatedCoordinates'] = undefined;

/**
 * @member {String} geocacheCode
 */
GeocacheLog.prototype['geocacheCode'] = undefined;

/**
 * @member {Boolean} usedFavoritePoint
 */
GeocacheLog.prototype['usedFavoritePoint'] = undefined;






export default GeocacheLog;

