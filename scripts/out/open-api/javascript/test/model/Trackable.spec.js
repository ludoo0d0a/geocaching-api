/**
 * API v1.0
 * API version 1.0.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiV10);
  }
}(this, function(expect, ApiV10) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiV10.Trackable();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Trackable', function() {
    it('should create an instance of Trackable', function() {
      // uncomment below and update the code to test Trackable
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be.a(ApiV10.Trackable);
    });

    it('should have the property referenceCode (base name: "referenceCode")', function() {
      // uncomment below and update the code to test the property referenceCode
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property iconUrl (base name: "iconUrl")', function() {
      // uncomment below and update the code to test the property iconUrl
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property goal (base name: "goal")', function() {
      // uncomment below and update the code to test the property goal
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property releasedDate (base name: "releasedDate")', function() {
      // uncomment below and update the code to test the property releasedDate
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property originCountry (base name: "originCountry")', function() {
      // uncomment below and update the code to test the property originCountry
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property allowedToBeCollected (base name: "allowedToBeCollected")', function() {
      // uncomment below and update the code to test the property allowedToBeCollected
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property ownerCode (base name: "ownerCode")', function() {
      // uncomment below and update the code to test the property ownerCode
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property holderCode (base name: "holderCode")', function() {
      // uncomment below and update the code to test the property holderCode
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property holder (base name: "holder")', function() {
      // uncomment below and update the code to test the property holder
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property inHolderCollection (base name: "inHolderCollection")', function() {
      // uncomment below and update the code to test the property inHolderCollection
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property currentGeocacheCode (base name: "currentGeocacheCode")', function() {
      // uncomment below and update the code to test the property currentGeocacheCode
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property isMissing (base name: "isMissing")', function() {
      // uncomment below and update the code to test the property isMissing
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property trackableType (base name: "trackableType")', function() {
      // uncomment below and update the code to test the property trackableType
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property imageCount (base name: "imageCount")', function() {
      // uncomment below and update the code to test the property imageCount
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property trackingNumber (base name: "trackingNumber")', function() {
      // uncomment below and update the code to test the property trackingNumber
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property currentGeocacheName (base name: "currentGeocacheName")', function() {
      // uncomment below and update the code to test the property currentGeocacheName
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property trackableLogs (base name: "trackableLogs")', function() {
      // uncomment below and update the code to test the property trackableLogs
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

    it('should have the property images (base name: "images")', function() {
      // uncomment below and update the code to test the property images
      //var instane = new ApiV10.Trackable();
      //expect(instance).to.be();
    });

  });

}));
