/**
 * API v1.0
 * API version 1.0.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Image from './Image';
import TrackableLog from './TrackableLog';
import TrackableType from './TrackableType';
import User from './User';

/**
 * The Trackable model module.
 * @module model/Trackable
 * @version 1.0.0-oas3
 */
class Trackable {
    /**
     * Constructs a new <code>Trackable</code>.
     * @alias module:model/Trackable
     */
    constructor() { 
        
        Trackable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Trackable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Trackable} obj Optional instance to populate.
     * @return {module:model/Trackable} The populated <code>Trackable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Trackable();

            if (data.hasOwnProperty('referenceCode')) {
                obj['referenceCode'] = ApiClient.convertToType(data['referenceCode'], 'String');
            }
            if (data.hasOwnProperty('iconUrl')) {
                obj['iconUrl'] = ApiClient.convertToType(data['iconUrl'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('goal')) {
                obj['goal'] = ApiClient.convertToType(data['goal'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('releasedDate')) {
                obj['releasedDate'] = ApiClient.convertToType(data['releasedDate'], 'String');
            }
            if (data.hasOwnProperty('originCountry')) {
                obj['originCountry'] = ApiClient.convertToType(data['originCountry'], 'String');
            }
            if (data.hasOwnProperty('allowedToBeCollected')) {
                obj['allowedToBeCollected'] = ApiClient.convertToType(data['allowedToBeCollected'], 'Boolean');
            }
            if (data.hasOwnProperty('ownerCode')) {
                obj['ownerCode'] = ApiClient.convertToType(data['ownerCode'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = User.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('holderCode')) {
                obj['holderCode'] = ApiClient.convertToType(data['holderCode'], 'String');
            }
            if (data.hasOwnProperty('holder')) {
                obj['holder'] = User.constructFromObject(data['holder']);
            }
            if (data.hasOwnProperty('inHolderCollection')) {
                obj['inHolderCollection'] = ApiClient.convertToType(data['inHolderCollection'], 'Boolean');
            }
            if (data.hasOwnProperty('currentGeocacheCode')) {
                obj['currentGeocacheCode'] = ApiClient.convertToType(data['currentGeocacheCode'], 'String');
            }
            if (data.hasOwnProperty('isMissing')) {
                obj['isMissing'] = ApiClient.convertToType(data['isMissing'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('trackableType')) {
                obj['trackableType'] = TrackableType.constructFromObject(data['trackableType']);
            }
            if (data.hasOwnProperty('imageCount')) {
                obj['imageCount'] = ApiClient.convertToType(data['imageCount'], 'Number');
            }
            if (data.hasOwnProperty('trackingNumber')) {
                obj['trackingNumber'] = ApiClient.convertToType(data['trackingNumber'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('currentGeocacheName')) {
                obj['currentGeocacheName'] = ApiClient.convertToType(data['currentGeocacheName'], 'String');
            }
            if (data.hasOwnProperty('trackableLogs')) {
                obj['trackableLogs'] = ApiClient.convertToType(data['trackableLogs'], [TrackableLog]);
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [Image]);
            }
        }
        return obj;
    }


}

/**
 * @member {String} referenceCode
 */
Trackable.prototype['referenceCode'] = undefined;

/**
 * @member {String} iconUrl
 */
Trackable.prototype['iconUrl'] = undefined;

/**
 * @member {String} name
 */
Trackable.prototype['name'] = undefined;

/**
 * @member {String} goal
 */
Trackable.prototype['goal'] = undefined;

/**
 * @member {String} description
 */
Trackable.prototype['description'] = undefined;

/**
 * @member {String} releasedDate
 */
Trackable.prototype['releasedDate'] = undefined;

/**
 * @member {String} originCountry
 */
Trackable.prototype['originCountry'] = undefined;

/**
 * @member {Boolean} allowedToBeCollected
 */
Trackable.prototype['allowedToBeCollected'] = undefined;

/**
 * @member {String} ownerCode
 */
Trackable.prototype['ownerCode'] = undefined;

/**
 * @member {module:model/User} owner
 */
Trackable.prototype['owner'] = undefined;

/**
 * @member {String} holderCode
 */
Trackable.prototype['holderCode'] = undefined;

/**
 * @member {module:model/User} holder
 */
Trackable.prototype['holder'] = undefined;

/**
 * @member {Boolean} inHolderCollection
 */
Trackable.prototype['inHolderCollection'] = undefined;

/**
 * @member {String} currentGeocacheCode
 */
Trackable.prototype['currentGeocacheCode'] = undefined;

/**
 * @member {Boolean} isMissing
 */
Trackable.prototype['isMissing'] = undefined;

/**
 * @member {String} type
 */
Trackable.prototype['type'] = undefined;

/**
 * @member {module:model/TrackableType} trackableType
 */
Trackable.prototype['trackableType'] = undefined;

/**
 * @member {Number} imageCount
 */
Trackable.prototype['imageCount'] = undefined;

/**
 * @member {String} trackingNumber
 */
Trackable.prototype['trackingNumber'] = undefined;

/**
 * @member {String} url
 */
Trackable.prototype['url'] = undefined;

/**
 * @member {String} currentGeocacheName
 */
Trackable.prototype['currentGeocacheName'] = undefined;

/**
 * @member {Array.<module:model/TrackableLog>} trackableLogs
 */
Trackable.prototype['trackableLogs'] = undefined;

/**
 * @member {Array.<module:model/Image>} images
 */
Trackable.prototype['images'] = undefined;






export default Trackable;

