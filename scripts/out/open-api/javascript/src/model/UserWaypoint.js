/**
 * API v1.0
 * API version 1.0.
 *
 * The version of the OpenAPI document: v1
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Coordinates from './Coordinates';

/**
 * The UserWaypoint model module.
 * @module model/UserWaypoint
 * @version v1
 */
class UserWaypoint {
    /**
     * Constructs a new <code>UserWaypoint</code>.
     * @alias module:model/UserWaypoint
     * @param coordinates {module:model/Coordinates} 
     * @param geocacheCode {String} 
     * @param isCorrectedCoordinates {Boolean} 
     */
    constructor(coordinates, geocacheCode, isCorrectedCoordinates) { 
        
        UserWaypoint.initialize(this, coordinates, geocacheCode, isCorrectedCoordinates);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, coordinates, geocacheCode, isCorrectedCoordinates) { 
        obj['coordinates'] = coordinates;
        obj['geocacheCode'] = geocacheCode;
        obj['isCorrectedCoordinates'] = isCorrectedCoordinates;
    }

    /**
     * Constructs a <code>UserWaypoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserWaypoint} obj Optional instance to populate.
     * @return {module:model/UserWaypoint} The populated <code>UserWaypoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserWaypoint();

            if (data.hasOwnProperty('coordinates')) {
                obj['coordinates'] = Coordinates.constructFromObject(data['coordinates']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('geocacheCode')) {
                obj['geocacheCode'] = ApiClient.convertToType(data['geocacheCode'], 'String');
            }
            if (data.hasOwnProperty('isCorrectedCoordinates')) {
                obj['isCorrectedCoordinates'] = ApiClient.convertToType(data['isCorrectedCoordinates'], 'Boolean');
            }
            if (data.hasOwnProperty('referenceCode')) {
                obj['referenceCode'] = ApiClient.convertToType(data['referenceCode'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/Coordinates} coordinates
 */
UserWaypoint.prototype['coordinates'] = undefined;

/**
 * @member {String} description
 */
UserWaypoint.prototype['description'] = undefined;

/**
 * @member {String} geocacheCode
 */
UserWaypoint.prototype['geocacheCode'] = undefined;

/**
 * @member {Boolean} isCorrectedCoordinates
 */
UserWaypoint.prototype['isCorrectedCoordinates'] = undefined;

/**
 * @member {String} referenceCode
 */
UserWaypoint.prototype['referenceCode'] = undefined;






export default UserWaypoint;

