/**
 * API v1.0
 * API version 1.0.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
import { GeocacheLog } from '../model/geocacheLog';
import { Image } from '../model/image';
import { PostGeocacheLog } from '../model/postGeocacheLog';
import { PostImage } from '../model/postImage';

import { ObjectSerializer, Authentication, VoidAuth } from '../model/models';

let defaultBasePath = 'https://api.groundspeak.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum GeocacheLogsApiApiKeys {
}

export class GeocacheLogsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: GeocacheLogsApiApiKeys, value: string) {
        (this.authentications as any)[GeocacheLogsApiApiKeys[key]].apiKey = value;
    }

    /**
     * This method will return a single Geocache.
     * @summary Add an image to a geocache log
     * @param referenceCode The reference code of the geocache log (example: GL100).
     * @param apiVersion The requested API version
     * @param postImage 
     * @param fields fields to return on the response object, defaults to \&quot;url\&quot;
     */
    public async geocacheLogsAddImage (referenceCode: string, apiVersion: string, postImage: PostImage, fields?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Image;  }> {
        const localVarPath = this.basePath + '/v{api-version}/geocachelogs/{referenceCode}/images'
            .replace('{' + 'referenceCode' + '}', encodeURIComponent(String(referenceCode)))
            .replace('{' + 'api-version' + '}', encodeURIComponent(String(apiVersion)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'referenceCode' is not null or undefined
        if (referenceCode === null || referenceCode === undefined) {
            throw new Error('Required parameter referenceCode was null or undefined when calling geocacheLogsAddImage.');
        }

        // verify required parameter 'apiVersion' is not null or undefined
        if (apiVersion === null || apiVersion === undefined) {
            throw new Error('Required parameter apiVersion was null or undefined when calling geocacheLogsAddImage.');
        }

        // verify required parameter 'postImage' is not null or undefined
        if (postImage === null || postImage === undefined) {
            throw new Error('Required parameter postImage was null or undefined when calling geocacheLogsAddImage.');
        }

        if (fields !== undefined) {
            localVarQueryParameters['fields'] = ObjectSerializer.serialize(fields, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(postImage, "PostImage")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Image;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Image");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This method will return the created geocache log.
     * @summary Add a log to a geocache
     * @param apiVersion The requested API version
     * @param postGeocacheLog The log to add
     * @param fields the fields to return in the response body, defaults to referencecode
     */
    public async geocacheLogsCreateGeocacheLog (apiVersion: string, postGeocacheLog: PostGeocacheLog, fields?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: GeocacheLog;  }> {
        const localVarPath = this.basePath + '/v{api-version}/geocachelogs'
            .replace('{' + 'api-version' + '}', encodeURIComponent(String(apiVersion)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'apiVersion' is not null or undefined
        if (apiVersion === null || apiVersion === undefined) {
            throw new Error('Required parameter apiVersion was null or undefined when calling geocacheLogsCreateGeocacheLog.');
        }

        // verify required parameter 'postGeocacheLog' is not null or undefined
        if (postGeocacheLog === null || postGeocacheLog === undefined) {
            throw new Error('Required parameter postGeocacheLog was null or undefined when calling geocacheLogsCreateGeocacheLog.');
        }

        if (fields !== undefined) {
            localVarQueryParameters['fields'] = ObjectSerializer.serialize(fields, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(postGeocacheLog, "PostGeocacheLog")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: GeocacheLog;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "GeocacheLog");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This method will not have a response body.
     * @summary Delete a geocache log
     * @param referenceCode The reference code of the geocache log (example: GL100).
     * @param apiVersion The requested API version
     */
    public async geocacheLogsDeleteGeocacheLog (referenceCode: string, apiVersion: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: object;  }> {
        const localVarPath = this.basePath + '/v{api-version}/geocachelogs/{referenceCode}'
            .replace('{' + 'referenceCode' + '}', encodeURIComponent(String(referenceCode)))
            .replace('{' + 'api-version' + '}', encodeURIComponent(String(apiVersion)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'referenceCode' is not null or undefined
        if (referenceCode === null || referenceCode === undefined) {
            throw new Error('Required parameter referenceCode was null or undefined when calling geocacheLogsDeleteGeocacheLog.');
        }

        // verify required parameter 'apiVersion' is not null or undefined
        if (apiVersion === null || apiVersion === undefined) {
            throw new Error('Required parameter apiVersion was null or undefined when calling geocacheLogsDeleteGeocacheLog.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: object;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "object");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This method will not return anything in the body.
     * @summary Deletes a geocache log image
     * @param referenceCode The reference code of the geocache log (example: GL100).
     * @param imageGuid the guid of the image
     * @param apiVersion The requested API version
     */
    public async geocacheLogsDeleteGeocacheLogImages (referenceCode: string, imageGuid: string, apiVersion: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: object;  }> {
        const localVarPath = this.basePath + '/v{api-version}/geocachelogs/{referenceCode}/images/{imageGuid}'
            .replace('{' + 'referenceCode' + '}', encodeURIComponent(String(referenceCode)))
            .replace('{' + 'imageGuid' + '}', encodeURIComponent(String(imageGuid)))
            .replace('{' + 'api-version' + '}', encodeURIComponent(String(apiVersion)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'referenceCode' is not null or undefined
        if (referenceCode === null || referenceCode === undefined) {
            throw new Error('Required parameter referenceCode was null or undefined when calling geocacheLogsDeleteGeocacheLogImages.');
        }

        // verify required parameter 'imageGuid' is not null or undefined
        if (imageGuid === null || imageGuid === undefined) {
            throw new Error('Required parameter imageGuid was null or undefined when calling geocacheLogsDeleteGeocacheLogImages.');
        }

        // verify required parameter 'apiVersion' is not null or undefined
        if (apiVersion === null || apiVersion === undefined) {
            throw new Error('Required parameter apiVersion was null or undefined when calling geocacheLogsDeleteGeocacheLogImages.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: object;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "object");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This method will return a single geocache log.
     * @summary Get a single geocache log
     * @param referenceCode The reference code of the geocache log (example: GL100).
     * @param apiVersion The requested API version
     * @param expand fields to include with base geocache log object
     * @param fields Property fields you want to return, defaults to referencecode
     */
    public async geocacheLogsGetGeocacheLog (referenceCode: string, apiVersion: string, expand?: string, fields?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: GeocacheLog;  }> {
        const localVarPath = this.basePath + '/v{api-version}/geocachelogs/{referenceCode}'
            .replace('{' + 'referenceCode' + '}', encodeURIComponent(String(referenceCode)))
            .replace('{' + 'api-version' + '}', encodeURIComponent(String(apiVersion)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'referenceCode' is not null or undefined
        if (referenceCode === null || referenceCode === undefined) {
            throw new Error('Required parameter referenceCode was null or undefined when calling geocacheLogsGetGeocacheLog.');
        }

        // verify required parameter 'apiVersion' is not null or undefined
        if (apiVersion === null || apiVersion === undefined) {
            throw new Error('Required parameter apiVersion was null or undefined when calling geocacheLogsGetGeocacheLog.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        if (fields !== undefined) {
            localVarQueryParameters['fields'] = ObjectSerializer.serialize(fields, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: GeocacheLog;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "GeocacheLog");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This method will return a list of images.
     * @summary Get a the images attached to a geocache log
     * @param referenceCode The reference code of the geocache log (example: GL100).
     * @param apiVersion The requested API version
     * @param skip Amount of images to skip over used for pagination. Defaults to 0.
     * @param take Amount of images to include in results. Defaults to 10.
     * @param fields Properties you want to return. Defaults to \&quot;url\&quot;.
     */
    public async geocacheLogsGetImages (referenceCode: string, apiVersion: string, skip?: number, take?: number, fields?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<Image>;  }> {
        const localVarPath = this.basePath + '/v{api-version}/geocachelogs/{referenceCode}/images'
            .replace('{' + 'referenceCode' + '}', encodeURIComponent(String(referenceCode)))
            .replace('{' + 'api-version' + '}', encodeURIComponent(String(apiVersion)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'referenceCode' is not null or undefined
        if (referenceCode === null || referenceCode === undefined) {
            throw new Error('Required parameter referenceCode was null or undefined when calling geocacheLogsGetImages.');
        }

        // verify required parameter 'apiVersion' is not null or undefined
        if (apiVersion === null || apiVersion === undefined) {
            throw new Error('Required parameter apiVersion was null or undefined when calling geocacheLogsGetImages.');
        }

        if (skip !== undefined) {
            localVarQueryParameters['skip'] = ObjectSerializer.serialize(skip, "number");
        }

        if (take !== undefined) {
            localVarQueryParameters['take'] = ObjectSerializer.serialize(take, "number");
        }

        if (fields !== undefined) {
            localVarQueryParameters['fields'] = ObjectSerializer.serialize(fields, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Image>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Image>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This method will return a geocache log.
     * @summary Update a geocache log
     * @param referenceCode The log reference code (example: GL100).
     * @param apiVersion The requested API version
     * @param geocacheLog An instance of the log that is being modified
     * @param fields Property fields you want to return, defaults to referencecode
     */
    public async geocacheLogsUpdateGeocacheLog (referenceCode: string, apiVersion: string, geocacheLog: GeocacheLog, fields?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: GeocacheLog;  }> {
        const localVarPath = this.basePath + '/v{api-version}/geocachelogs/{referenceCode}'
            .replace('{' + 'referenceCode' + '}', encodeURIComponent(String(referenceCode)))
            .replace('{' + 'api-version' + '}', encodeURIComponent(String(apiVersion)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'referenceCode' is not null or undefined
        if (referenceCode === null || referenceCode === undefined) {
            throw new Error('Required parameter referenceCode was null or undefined when calling geocacheLogsUpdateGeocacheLog.');
        }

        // verify required parameter 'apiVersion' is not null or undefined
        if (apiVersion === null || apiVersion === undefined) {
            throw new Error('Required parameter apiVersion was null or undefined when calling geocacheLogsUpdateGeocacheLog.');
        }

        // verify required parameter 'geocacheLog' is not null or undefined
        if (geocacheLog === null || geocacheLog === undefined) {
            throw new Error('Required parameter geocacheLog was null or undefined when calling geocacheLogsUpdateGeocacheLog.');
        }

        if (fields !== undefined) {
            localVarQueryParameters['fields'] = ObjectSerializer.serialize(fields, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(geocacheLog, "GeocacheLog")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: GeocacheLog;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "GeocacheLog");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
