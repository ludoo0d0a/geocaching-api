/**
 * API v1.0
 * API version 1.0.
 *
 * The version of the OpenAPI document: v1
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Coordinates from './Coordinates';
import GeocacheCount from './GeocacheCount';
import GeocacheLimit from './GeocacheLimit';
import TrackableCount from './TrackableCount';

/**
 * The User model module.
 * @module model/User
 * @version v1
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('avatarUrl')) {
                obj['avatarUrl'] = ApiClient.convertToType(data['avatarUrl'], 'String');
            }
            if (data.hasOwnProperty('bannerUrl')) {
                obj['bannerUrl'] = ApiClient.convertToType(data['bannerUrl'], 'String');
            }
            if (data.hasOwnProperty('favoritePoints')) {
                obj['favoritePoints'] = ApiClient.convertToType(data['favoritePoints'], 'Number');
            }
            if (data.hasOwnProperty('findCount')) {
                obj['findCount'] = ApiClient.convertToType(data['findCount'], 'Number');
            }
            if (data.hasOwnProperty('geocacheFindCounts')) {
                obj['geocacheFindCounts'] = ApiClient.convertToType(data['geocacheFindCounts'], [GeocacheCount]);
            }
            if (data.hasOwnProperty('geocacheHideCounts')) {
                obj['geocacheHideCounts'] = ApiClient.convertToType(data['geocacheHideCounts'], [GeocacheCount]);
            }
            if (data.hasOwnProperty('geocacheLimits')) {
                obj['geocacheLimits'] = GeocacheLimit.constructFromObject(data['geocacheLimits']);
            }
            if (data.hasOwnProperty('hideCount')) {
                obj['hideCount'] = ApiClient.convertToType(data['hideCount'], 'Number');
            }
            if (data.hasOwnProperty('homeCoordinates')) {
                obj['homeCoordinates'] = Coordinates.constructFromObject(data['homeCoordinates']);
            }
            if (data.hasOwnProperty('isFriend')) {
                obj['isFriend'] = ApiClient.convertToType(data['isFriend'], 'Boolean');
            }
            if (data.hasOwnProperty('joinedDateUtc')) {
                obj['joinedDateUtc'] = ApiClient.convertToType(data['joinedDateUtc'], 'Date');
            }
            if (data.hasOwnProperty('membershipLevelId')) {
                obj['membershipLevelId'] = ApiClient.convertToType(data['membershipLevelId'], 'Number');
            }
            if (data.hasOwnProperty('optedInFriendSharing')) {
                obj['optedInFriendSharing'] = ApiClient.convertToType(data['optedInFriendSharing'], 'Boolean');
            }
            if (data.hasOwnProperty('profileText')) {
                obj['profileText'] = ApiClient.convertToType(data['profileText'], 'String');
            }
            if (data.hasOwnProperty('referenceCode')) {
                obj['referenceCode'] = ApiClient.convertToType(data['referenceCode'], 'String');
            }
            if (data.hasOwnProperty('trackableFindCounts')) {
                obj['trackableFindCounts'] = ApiClient.convertToType(data['trackableFindCounts'], [TrackableCount]);
            }
            if (data.hasOwnProperty('trackableOwnedCounts')) {
                obj['trackableOwnedCounts'] = ApiClient.convertToType(data['trackableOwnedCounts'], [TrackableCount]);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} avatarUrl
 */
User.prototype['avatarUrl'] = undefined;

/**
 * @member {String} bannerUrl
 */
User.prototype['bannerUrl'] = undefined;

/**
 * @member {Number} favoritePoints
 */
User.prototype['favoritePoints'] = undefined;

/**
 * @member {Number} findCount
 */
User.prototype['findCount'] = undefined;

/**
 * @member {Array.<module:model/GeocacheCount>} geocacheFindCounts
 */
User.prototype['geocacheFindCounts'] = undefined;

/**
 * @member {Array.<module:model/GeocacheCount>} geocacheHideCounts
 */
User.prototype['geocacheHideCounts'] = undefined;

/**
 * @member {module:model/GeocacheLimit} geocacheLimits
 */
User.prototype['geocacheLimits'] = undefined;

/**
 * @member {Number} hideCount
 */
User.prototype['hideCount'] = undefined;

/**
 * @member {module:model/Coordinates} homeCoordinates
 */
User.prototype['homeCoordinates'] = undefined;

/**
 * @member {Boolean} isFriend
 */
User.prototype['isFriend'] = undefined;

/**
 * @member {Date} joinedDateUtc
 */
User.prototype['joinedDateUtc'] = undefined;

/**
 * @member {Number} membershipLevelId
 */
User.prototype['membershipLevelId'] = undefined;

/**
 * @member {Boolean} optedInFriendSharing
 */
User.prototype['optedInFriendSharing'] = undefined;

/**
 * @member {String} profileText
 */
User.prototype['profileText'] = undefined;

/**
 * @member {String} referenceCode
 */
User.prototype['referenceCode'] = undefined;

/**
 * @member {Array.<module:model/TrackableCount>} trackableFindCounts
 */
User.prototype['trackableFindCounts'] = undefined;

/**
 * @member {Array.<module:model/TrackableCount>} trackableOwnedCounts
 */
User.prototype['trackableOwnedCounts'] = undefined;

/**
 * @member {String} url
 */
User.prototype['url'] = undefined;

/**
 * @member {String} username
 */
User.prototype['username'] = undefined;






export default User;

