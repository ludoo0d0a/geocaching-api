import http, {utils} from '../utils/http';
import {HttpClient, APIConfiguration, List} from '../utils/types';

/*
 List of interfaces from request parameters
*/
<% endpoints.forEach(function(e){ %>
export interface <%= e.interfaceName %> {<% e.params.forEach(function(param){ %>
  // [<%= param.type %>] <%= param.description %><% if (param.nullable) { %> (Nullable)<% } %><% if (param.deprecated) { %> (Deprecated)<% } %><% if (param.defaultValue) { %> default:<%= param.defaultValue %><% } %><% if (param.example) { %> ex:<%= param.example %><% } %>
  <%= param.name %><% if (!param.required) { %>?<% } %>: string;<% }); %> 
}
<% }); %>

/*
* Returned api <%= apiName %>
*/
export const <%= apiName %> = (configuration: APIConfiguration, httpClient: HttpClient): <%= apiInterfaceName %> => {
    const {get, post, delete_} = httpClient;

    <% endpoints.forEach(function(e){ %>
    /**
    * <%= e.title %>
    * <%= e.description %>
    *
    * @path: <%= e.path %>
    * @method: <%= e.httpMethod %>
    * @link <%= e.link %>
    * @access <%= e.access %>
    <% e.params.forEach(function(param){ %>* @param <%= param.name %> (<%= param.type %>) <% if (param.required) { %>[required]<% } %> <%= param.description %> <%= param.defaultValue %> (<%= param.example %>)
<% }); %>        * @return <%= e.responseType %> <%= e.responseTypeUrl %>
    * @responseCodes <%= e.responseCodes %>
    * @restrictions <%= e.restrictions %>
    */
    const <%= e.functionName %> = (params: <%= e.interfaceName %>, cb)<% if (e.responseType) { %>: <%= e.responseType %><% } %> => {
        <% if (e.required_params && e.required_params.length>0) { %>
        // check required params
        %> 
        <% e.required_params.forEach(function(p){ %>
        if (!params.<%= p.name %>) {
                throw new Exception('<%= p.name %> is missing.');
        }
        <% }); %><% } %>

        <% 
        let paths = e.params
            .filter(p=>p.type==='path')
            .map(p=>p.name)
            .join(',')
        paths=`[${paths}]`;
        let body = e.params
            .filter(p=>p.type==='body')
            .map(p=>e.interfaceName+'.'+p.name)
        let queries = e.params
            .filter(p=>p.type==='query')
            .map(p=>`${p.name}: ${e.interfaceName}.${p.name}`)
            .join(',')
        queries=`[${queries}]`;
        %>

        const urlOptions = {
            path_params: <%= paths %>,
            query_params: <%= queries %>
        }
        //TODO body undefined
        return this.<%= e.httpMethod %>(configuration, '<%= e.path %>', urlOptions, <%= body %>);
    };
    <% }); //endpoints loop %>

    // Returns all methods in a single object API
    return {
        <% endpoints.forEach(function(e){ %><%= e.functionName %>,
        <% }); //endpoints loop %>
    };

}; //end export const


export default (configuration: APIConfiguration): <%= apiInterfaceName %> => {
    return <%= apiName %>(configuration, http);
};