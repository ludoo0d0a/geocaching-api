/**
 * Geocaching API v1.0
 * Geocaching API version 1.0.
 *
 * OpenAPI spec version: v1
 * Contact: apihelp@geocaching.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/geocaching-api-v10'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/geocaching-api-v10'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GeocachingApiV10);
  }
}(this, function(expect, GeocachingApiV10) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GeocachingApiV10.User();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('User', function() {
    it('should create an instance of User', function() {
      // uncomment below and update the code to test User
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be.a(GeocachingApiV10.User);
    });

    it('should have the property membershipLevelId (base name: "membershipLevelId")', function() {
      // uncomment below and update the code to test the property membershipLevelId
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

    it('should have the property joinedDateUtc (base name: "joinedDateUtc")', function() {
      // uncomment below and update the code to test the property joinedDateUtc
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

    it('should have the property findCount (base name: "findCount")', function() {
      // uncomment below and update the code to test the property findCount
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

    it('should have the property hideCount (base name: "hideCount")', function() {
      // uncomment below and update the code to test the property hideCount
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

    it('should have the property favoritePoints (base name: "favoritePoints")', function() {
      // uncomment below and update the code to test the property favoritePoints
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

    it('should have the property homeCoordinates (base name: "homeCoordinates")', function() {
      // uncomment below and update the code to test the property homeCoordinates
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

    it('should have the property geocacheLimits (base name: "geocacheLimits")', function() {
      // uncomment below and update the code to test the property geocacheLimits
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

    it('should have the property profileText (base name: "profileText")', function() {
      // uncomment below and update the code to test the property profileText
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

    it('should have the property bannerUrl (base name: "bannerUrl")', function() {
      // uncomment below and update the code to test the property bannerUrl
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

    it('should have the property geocacheFindCounts (base name: "geocacheFindCounts")', function() {
      // uncomment below and update the code to test the property geocacheFindCounts
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

    it('should have the property geocacheHideCounts (base name: "geocacheHideCounts")', function() {
      // uncomment below and update the code to test the property geocacheHideCounts
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

    it('should have the property trackableFindCounts (base name: "trackableFindCounts")', function() {
      // uncomment below and update the code to test the property trackableFindCounts
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

    it('should have the property trackableOwnedCounts (base name: "trackableOwnedCounts")', function() {
      // uncomment below and update the code to test the property trackableOwnedCounts
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

    it('should have the property referenceCode (base name: "referenceCode")', function() {
      // uncomment below and update the code to test the property referenceCode
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

    it('should have the property avatarUrl (base name: "avatarUrl")', function() {
      // uncomment below and update the code to test the property avatarUrl
      //var instance = new GeocachingApiV10.User();
      //expect(instance).to.be();
    });

  });

}));
